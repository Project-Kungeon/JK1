// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameRound.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameRound_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameRound_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameRound_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameRound_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameRound_2eproto;
namespace game {
namespace round {
class S_Round_EndInfo;
struct S_Round_EndInfoDefaultTypeInternal;
extern S_Round_EndInfoDefaultTypeInternal _S_Round_EndInfo_default_instance_;
class S_Round_GameOver_Countdown;
struct S_Round_GameOver_CountdownDefaultTypeInternal;
extern S_Round_GameOver_CountdownDefaultTypeInternal _S_Round_GameOver_Countdown_default_instance_;
class S_Round_StartInfo;
struct S_Round_StartInfoDefaultTypeInternal;
extern S_Round_StartInfoDefaultTypeInternal _S_Round_StartInfo_default_instance_;
class S_Round_TimeInfo;
struct S_Round_TimeInfoDefaultTypeInternal;
extern S_Round_TimeInfoDefaultTypeInternal _S_Round_TimeInfo_default_instance_;
}  // namespace round
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::round::S_Round_EndInfo* Arena::CreateMaybeMessage<::game::round::S_Round_EndInfo>(Arena*);
template<> ::game::round::S_Round_GameOver_Countdown* Arena::CreateMaybeMessage<::game::round::S_Round_GameOver_Countdown>(Arena*);
template<> ::game::round::S_Round_StartInfo* Arena::CreateMaybeMessage<::game::round::S_Round_StartInfo>(Arena*);
template<> ::game::round::S_Round_TimeInfo* Arena::CreateMaybeMessage<::game::round::S_Round_TimeInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {
namespace round {

enum S_Round_TimeInfo_TimeInfoType : int {
  S_Round_TimeInfo_TimeInfoType_ROUND_WAIT = 0,
  S_Round_TimeInfo_TimeInfoType_ROUND_START = 1,
  S_Round_TimeInfo_TimeInfoType_TIME_UPDATE = 2,
  S_Round_TimeInfo_TimeInfoType_S_Round_TimeInfo_TimeInfoType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  S_Round_TimeInfo_TimeInfoType_S_Round_TimeInfo_TimeInfoType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool S_Round_TimeInfo_TimeInfoType_IsValid(int value);
constexpr S_Round_TimeInfo_TimeInfoType S_Round_TimeInfo_TimeInfoType_TimeInfoType_MIN = S_Round_TimeInfo_TimeInfoType_ROUND_WAIT;
constexpr S_Round_TimeInfo_TimeInfoType S_Round_TimeInfo_TimeInfoType_TimeInfoType_MAX = S_Round_TimeInfo_TimeInfoType_TIME_UPDATE;
constexpr int S_Round_TimeInfo_TimeInfoType_TimeInfoType_ARRAYSIZE = S_Round_TimeInfo_TimeInfoType_TimeInfoType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* S_Round_TimeInfo_TimeInfoType_descriptor();
template<typename T>
inline const std::string& S_Round_TimeInfo_TimeInfoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, S_Round_TimeInfo_TimeInfoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function S_Round_TimeInfo_TimeInfoType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    S_Round_TimeInfo_TimeInfoType_descriptor(), enum_t_value);
}
inline bool S_Round_TimeInfo_TimeInfoType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, S_Round_TimeInfo_TimeInfoType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<S_Round_TimeInfo_TimeInfoType>(
    S_Round_TimeInfo_TimeInfoType_descriptor(), name, value);
}
enum S_Round_EndInfo_EndReasonType : int {
  S_Round_EndInfo_EndReasonType_PLAYER_ALL_DEAD = 0,
  S_Round_EndInfo_EndReasonType_ROUND_CLEAR = 1,
  S_Round_EndInfo_EndReasonType_ROUND_TIME_OVER = 2,
  S_Round_EndInfo_EndReasonType_S_Round_EndInfo_EndReasonType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  S_Round_EndInfo_EndReasonType_S_Round_EndInfo_EndReasonType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool S_Round_EndInfo_EndReasonType_IsValid(int value);
constexpr S_Round_EndInfo_EndReasonType S_Round_EndInfo_EndReasonType_EndReasonType_MIN = S_Round_EndInfo_EndReasonType_PLAYER_ALL_DEAD;
constexpr S_Round_EndInfo_EndReasonType S_Round_EndInfo_EndReasonType_EndReasonType_MAX = S_Round_EndInfo_EndReasonType_ROUND_TIME_OVER;
constexpr int S_Round_EndInfo_EndReasonType_EndReasonType_ARRAYSIZE = S_Round_EndInfo_EndReasonType_EndReasonType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* S_Round_EndInfo_EndReasonType_descriptor();
template<typename T>
inline const std::string& S_Round_EndInfo_EndReasonType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, S_Round_EndInfo_EndReasonType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function S_Round_EndInfo_EndReasonType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    S_Round_EndInfo_EndReasonType_descriptor(), enum_t_value);
}
inline bool S_Round_EndInfo_EndReasonType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, S_Round_EndInfo_EndReasonType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<S_Round_EndInfo_EndReasonType>(
    S_Round_EndInfo_EndReasonType_descriptor(), name, value);
}
// ===================================================================

class S_Round_StartInfo final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:game.round.S_Round_StartInfo) */ {
 public:
  inline S_Round_StartInfo() : S_Round_StartInfo(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_Round_StartInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Round_StartInfo(const S_Round_StartInfo& from);
  S_Round_StartInfo(S_Round_StartInfo&& from) noexcept
    : S_Round_StartInfo() {
    *this = ::std::move(from);
  }

  inline S_Round_StartInfo& operator=(const S_Round_StartInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Round_StartInfo& operator=(S_Round_StartInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Round_StartInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Round_StartInfo* internal_default_instance() {
    return reinterpret_cast<const S_Round_StartInfo*>(
               &_S_Round_StartInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S_Round_StartInfo& a, S_Round_StartInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Round_StartInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Round_StartInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Round_StartInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Round_StartInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_Round_StartInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_Round_StartInfo& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.round.S_Round_StartInfo";
  }
  protected:
  explicit S_Round_StartInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:game.round.S_Round_StartInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_GameRound_2eproto;
};
// -------------------------------------------------------------------

class S_Round_TimeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.round.S_Round_TimeInfo) */ {
 public:
  inline S_Round_TimeInfo() : S_Round_TimeInfo(nullptr) {}
  ~S_Round_TimeInfo() override;
  explicit PROTOBUF_CONSTEXPR S_Round_TimeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Round_TimeInfo(const S_Round_TimeInfo& from);
  S_Round_TimeInfo(S_Round_TimeInfo&& from) noexcept
    : S_Round_TimeInfo() {
    *this = ::std::move(from);
  }

  inline S_Round_TimeInfo& operator=(const S_Round_TimeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Round_TimeInfo& operator=(S_Round_TimeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Round_TimeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Round_TimeInfo* internal_default_instance() {
    return reinterpret_cast<const S_Round_TimeInfo*>(
               &_S_Round_TimeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_Round_TimeInfo& a, S_Round_TimeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Round_TimeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Round_TimeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Round_TimeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Round_TimeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Round_TimeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_Round_TimeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Round_TimeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.round.S_Round_TimeInfo";
  }
  protected:
  explicit S_Round_TimeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef S_Round_TimeInfo_TimeInfoType TimeInfoType;
  static constexpr TimeInfoType ROUND_WAIT =
    S_Round_TimeInfo_TimeInfoType_ROUND_WAIT;
  static constexpr TimeInfoType ROUND_START =
    S_Round_TimeInfo_TimeInfoType_ROUND_START;
  static constexpr TimeInfoType TIME_UPDATE =
    S_Round_TimeInfo_TimeInfoType_TIME_UPDATE;
  static inline bool TimeInfoType_IsValid(int value) {
    return S_Round_TimeInfo_TimeInfoType_IsValid(value);
  }
  static constexpr TimeInfoType TimeInfoType_MIN =
    S_Round_TimeInfo_TimeInfoType_TimeInfoType_MIN;
  static constexpr TimeInfoType TimeInfoType_MAX =
    S_Round_TimeInfo_TimeInfoType_TimeInfoType_MAX;
  static constexpr int TimeInfoType_ARRAYSIZE =
    S_Round_TimeInfo_TimeInfoType_TimeInfoType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TimeInfoType_descriptor() {
    return S_Round_TimeInfo_TimeInfoType_descriptor();
  }
  template<typename T>
  static inline const std::string& TimeInfoType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TimeInfoType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TimeInfoType_Name.");
    return S_Round_TimeInfo_TimeInfoType_Name(enum_t_value);
  }
  static inline bool TimeInfoType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TimeInfoType* value) {
    return S_Round_TimeInfo_TimeInfoType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kRemainingSecondsFieldNumber = 2,
  };
  // .game.round.S_Round_TimeInfo.TimeInfoType type = 1;
  void clear_type();
  ::game::round::S_Round_TimeInfo_TimeInfoType type() const;
  void set_type(::game::round::S_Round_TimeInfo_TimeInfoType value);
  private:
  ::game::round::S_Round_TimeInfo_TimeInfoType _internal_type() const;
  void _internal_set_type(::game::round::S_Round_TimeInfo_TimeInfoType value);
  public:

  // int32 remaining_seconds = 2;
  void clear_remaining_seconds();
  int32_t remaining_seconds() const;
  void set_remaining_seconds(int32_t value);
  private:
  int32_t _internal_remaining_seconds() const;
  void _internal_set_remaining_seconds(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.round.S_Round_TimeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  int32_t remaining_seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameRound_2eproto;
};
// -------------------------------------------------------------------

class S_Round_EndInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.round.S_Round_EndInfo) */ {
 public:
  inline S_Round_EndInfo() : S_Round_EndInfo(nullptr) {}
  ~S_Round_EndInfo() override;
  explicit PROTOBUF_CONSTEXPR S_Round_EndInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Round_EndInfo(const S_Round_EndInfo& from);
  S_Round_EndInfo(S_Round_EndInfo&& from) noexcept
    : S_Round_EndInfo() {
    *this = ::std::move(from);
  }

  inline S_Round_EndInfo& operator=(const S_Round_EndInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Round_EndInfo& operator=(S_Round_EndInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Round_EndInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Round_EndInfo* internal_default_instance() {
    return reinterpret_cast<const S_Round_EndInfo*>(
               &_S_Round_EndInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_Round_EndInfo& a, S_Round_EndInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Round_EndInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Round_EndInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Round_EndInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Round_EndInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Round_EndInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_Round_EndInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Round_EndInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.round.S_Round_EndInfo";
  }
  protected:
  explicit S_Round_EndInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef S_Round_EndInfo_EndReasonType EndReasonType;
  static constexpr EndReasonType PLAYER_ALL_DEAD =
    S_Round_EndInfo_EndReasonType_PLAYER_ALL_DEAD;
  static constexpr EndReasonType ROUND_CLEAR =
    S_Round_EndInfo_EndReasonType_ROUND_CLEAR;
  static constexpr EndReasonType ROUND_TIME_OVER =
    S_Round_EndInfo_EndReasonType_ROUND_TIME_OVER;
  static inline bool EndReasonType_IsValid(int value) {
    return S_Round_EndInfo_EndReasonType_IsValid(value);
  }
  static constexpr EndReasonType EndReasonType_MIN =
    S_Round_EndInfo_EndReasonType_EndReasonType_MIN;
  static constexpr EndReasonType EndReasonType_MAX =
    S_Round_EndInfo_EndReasonType_EndReasonType_MAX;
  static constexpr int EndReasonType_ARRAYSIZE =
    S_Round_EndInfo_EndReasonType_EndReasonType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EndReasonType_descriptor() {
    return S_Round_EndInfo_EndReasonType_descriptor();
  }
  template<typename T>
  static inline const std::string& EndReasonType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EndReasonType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EndReasonType_Name.");
    return S_Round_EndInfo_EndReasonType_Name(enum_t_value);
  }
  static inline bool EndReasonType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EndReasonType* value) {
    return S_Round_EndInfo_EndReasonType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .game.round.S_Round_EndInfo.EndReasonType type = 1;
  void clear_type();
  ::game::round::S_Round_EndInfo_EndReasonType type() const;
  void set_type(::game::round::S_Round_EndInfo_EndReasonType value);
  private:
  ::game::round::S_Round_EndInfo_EndReasonType _internal_type() const;
  void _internal_set_type(::game::round::S_Round_EndInfo_EndReasonType value);
  public:

  // @@protoc_insertion_point(class_scope:game.round.S_Round_EndInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameRound_2eproto;
};
// -------------------------------------------------------------------

class S_Round_GameOver_Countdown final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.round.S_Round_GameOver_Countdown) */ {
 public:
  inline S_Round_GameOver_Countdown() : S_Round_GameOver_Countdown(nullptr) {}
  ~S_Round_GameOver_Countdown() override;
  explicit PROTOBUF_CONSTEXPR S_Round_GameOver_Countdown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Round_GameOver_Countdown(const S_Round_GameOver_Countdown& from);
  S_Round_GameOver_Countdown(S_Round_GameOver_Countdown&& from) noexcept
    : S_Round_GameOver_Countdown() {
    *this = ::std::move(from);
  }

  inline S_Round_GameOver_Countdown& operator=(const S_Round_GameOver_Countdown& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Round_GameOver_Countdown& operator=(S_Round_GameOver_Countdown&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Round_GameOver_Countdown& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Round_GameOver_Countdown* internal_default_instance() {
    return reinterpret_cast<const S_Round_GameOver_Countdown*>(
               &_S_Round_GameOver_Countdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_Round_GameOver_Countdown& a, S_Round_GameOver_Countdown& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Round_GameOver_Countdown* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Round_GameOver_Countdown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Round_GameOver_Countdown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Round_GameOver_Countdown>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Round_GameOver_Countdown& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_Round_GameOver_Countdown& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Round_GameOver_Countdown* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.round.S_Round_GameOver_Countdown";
  }
  protected:
  explicit S_Round_GameOver_Countdown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // int32 count = 1;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.round.S_Round_GameOver_Countdown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameRound_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S_Round_StartInfo

// -------------------------------------------------------------------

// S_Round_TimeInfo

// .game.round.S_Round_TimeInfo.TimeInfoType type = 1;
inline void S_Round_TimeInfo::clear_type() {
  type_ = 0;
}
inline ::game::round::S_Round_TimeInfo_TimeInfoType S_Round_TimeInfo::_internal_type() const {
  return static_cast< ::game::round::S_Round_TimeInfo_TimeInfoType >(type_);
}
inline ::game::round::S_Round_TimeInfo_TimeInfoType S_Round_TimeInfo::type() const {
  // @@protoc_insertion_point(field_get:game.round.S_Round_TimeInfo.type)
  return _internal_type();
}
inline void S_Round_TimeInfo::_internal_set_type(::game::round::S_Round_TimeInfo_TimeInfoType value) {
  
  type_ = value;
}
inline void S_Round_TimeInfo::set_type(::game::round::S_Round_TimeInfo_TimeInfoType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:game.round.S_Round_TimeInfo.type)
}

// int32 remaining_seconds = 2;
inline void S_Round_TimeInfo::clear_remaining_seconds() {
  remaining_seconds_ = 0;
}
inline int32_t S_Round_TimeInfo::_internal_remaining_seconds() const {
  return remaining_seconds_;
}
inline int32_t S_Round_TimeInfo::remaining_seconds() const {
  // @@protoc_insertion_point(field_get:game.round.S_Round_TimeInfo.remaining_seconds)
  return _internal_remaining_seconds();
}
inline void S_Round_TimeInfo::_internal_set_remaining_seconds(int32_t value) {
  
  remaining_seconds_ = value;
}
inline void S_Round_TimeInfo::set_remaining_seconds(int32_t value) {
  _internal_set_remaining_seconds(value);
  // @@protoc_insertion_point(field_set:game.round.S_Round_TimeInfo.remaining_seconds)
}

// -------------------------------------------------------------------

// S_Round_EndInfo

// .game.round.S_Round_EndInfo.EndReasonType type = 1;
inline void S_Round_EndInfo::clear_type() {
  type_ = 0;
}
inline ::game::round::S_Round_EndInfo_EndReasonType S_Round_EndInfo::_internal_type() const {
  return static_cast< ::game::round::S_Round_EndInfo_EndReasonType >(type_);
}
inline ::game::round::S_Round_EndInfo_EndReasonType S_Round_EndInfo::type() const {
  // @@protoc_insertion_point(field_get:game.round.S_Round_EndInfo.type)
  return _internal_type();
}
inline void S_Round_EndInfo::_internal_set_type(::game::round::S_Round_EndInfo_EndReasonType value) {
  
  type_ = value;
}
inline void S_Round_EndInfo::set_type(::game::round::S_Round_EndInfo_EndReasonType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:game.round.S_Round_EndInfo.type)
}

// -------------------------------------------------------------------

// S_Round_GameOver_Countdown

// int32 count = 1;
inline void S_Round_GameOver_Countdown::clear_count() {
  count_ = 0;
}
inline int32_t S_Round_GameOver_Countdown::_internal_count() const {
  return count_;
}
inline int32_t S_Round_GameOver_Countdown::count() const {
  // @@protoc_insertion_point(field_get:game.round.S_Round_GameOver_Countdown.count)
  return _internal_count();
}
inline void S_Round_GameOver_Countdown::_internal_set_count(int32_t value) {
  
  count_ = value;
}
inline void S_Round_GameOver_Countdown::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:game.round.S_Round_GameOver_Countdown.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace round
}  // namespace game

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::game::round::S_Round_TimeInfo_TimeInfoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::round::S_Round_TimeInfo_TimeInfoType>() {
  return ::game::round::S_Round_TimeInfo_TimeInfoType_descriptor();
}
template <> struct is_proto_enum< ::game::round::S_Round_EndInfo_EndReasonType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::round::S_Round_EndInfo_EndReasonType>() {
  return ::game::round::S_Round_EndInfo_EndReasonType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameRound_2eproto
