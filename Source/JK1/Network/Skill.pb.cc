// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Skill.proto

#include "Skill.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace skill {
PROTOBUF_CONSTEXPR S_CoolTime::S_CoolTime(
    ::_pbi::ConstantInitialized)
  : time_(0)
  , skill_type_(0)
{}
struct S_CoolTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CoolTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CoolTimeDefaultTypeInternal() {}
  union {
    S_CoolTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CoolTimeDefaultTypeInternal _S_CoolTime_default_instance_;
PROTOBUF_CONSTEXPR C_Warrior_Attack::C_Warrior_Attack(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_Warrior_AttackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_Warrior_AttackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_Warrior_AttackDefaultTypeInternal() {}
  union {
    C_Warrior_Attack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_Warrior_AttackDefaultTypeInternal _C_Warrior_Attack_default_instance_;
PROTOBUF_CONSTEXPR S_Warrior_Attack::S_Warrior_Attack(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Warrior_AttackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_Warrior_AttackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_Warrior_AttackDefaultTypeInternal() {}
  union {
    S_Warrior_Attack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_Warrior_AttackDefaultTypeInternal _S_Warrior_Attack_default_instance_;
PROTOBUF_CONSTEXPR C_Warrior_Q::C_Warrior_Q(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , target_id_(uint64_t{0u}){}
struct C_Warrior_QDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_Warrior_QDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_Warrior_QDefaultTypeInternal() {}
  union {
    C_Warrior_Q _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_Warrior_QDefaultTypeInternal _C_Warrior_Q_default_instance_;
PROTOBUF_CONSTEXPR S_Warrior_Q::S_Warrior_Q(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , target_id_(uint64_t{0u}){}
struct S_Warrior_QDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_Warrior_QDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_Warrior_QDefaultTypeInternal() {}
  union {
    S_Warrior_Q _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_Warrior_QDefaultTypeInternal _S_Warrior_Q_default_instance_;
PROTOBUF_CONSTEXPR C_Warrior_E::C_Warrior_E(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_Warrior_EDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_Warrior_EDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_Warrior_EDefaultTypeInternal() {}
  union {
    C_Warrior_E _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_Warrior_EDefaultTypeInternal _C_Warrior_E_default_instance_;
PROTOBUF_CONSTEXPR S_Warrior_E::S_Warrior_E(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Warrior_EDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_Warrior_EDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_Warrior_EDefaultTypeInternal() {}
  union {
    S_Warrior_E _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_Warrior_EDefaultTypeInternal _S_Warrior_E_default_instance_;
PROTOBUF_CONSTEXPR C_Warrior_R::C_Warrior_R(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_Warrior_RDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_Warrior_RDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_Warrior_RDefaultTypeInternal() {}
  union {
    C_Warrior_R _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_Warrior_RDefaultTypeInternal _C_Warrior_R_default_instance_;
PROTOBUF_CONSTEXPR S_Warrior_R::S_Warrior_R(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Warrior_RDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_Warrior_RDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_Warrior_RDefaultTypeInternal() {}
  union {
    S_Warrior_R _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_Warrior_RDefaultTypeInternal _S_Warrior_R_default_instance_;
PROTOBUF_CONSTEXPR C_Warrior_LS::C_Warrior_LS(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , z_(0)
  , yaw_(0){}
struct C_Warrior_LSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_Warrior_LSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_Warrior_LSDefaultTypeInternal() {}
  union {
    C_Warrior_LS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_Warrior_LSDefaultTypeInternal _C_Warrior_LS_default_instance_;
PROTOBUF_CONSTEXPR S_Warrior_LS::S_Warrior_LS(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , z_(0)
  , yaw_(0){}
struct S_Warrior_LSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_Warrior_LSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_Warrior_LSDefaultTypeInternal() {}
  union {
    S_Warrior_LS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_Warrior_LSDefaultTypeInternal _S_Warrior_LS_default_instance_;
PROTOBUF_CONSTEXPR C_ASSASSIN_Attack::C_ASSASSIN_Attack(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_ASSASSIN_AttackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ASSASSIN_AttackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ASSASSIN_AttackDefaultTypeInternal() {}
  union {
    C_ASSASSIN_Attack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ASSASSIN_AttackDefaultTypeInternal _C_ASSASSIN_Attack_default_instance_;
PROTOBUF_CONSTEXPR S_ASSASSIN_Attack::S_ASSASSIN_Attack(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_ASSASSIN_AttackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ASSASSIN_AttackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ASSASSIN_AttackDefaultTypeInternal() {}
  union {
    S_ASSASSIN_Attack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ASSASSIN_AttackDefaultTypeInternal _S_ASSASSIN_Attack_default_instance_;
PROTOBUF_CONSTEXPR C_ASSASSIN_Q::C_ASSASSIN_Q(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , z_(0)
  , pitch_(0)
  , yaw_(0)
  , roll_(0){}
struct C_ASSASSIN_QDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ASSASSIN_QDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ASSASSIN_QDefaultTypeInternal() {}
  union {
    C_ASSASSIN_Q _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ASSASSIN_QDefaultTypeInternal _C_ASSASSIN_Q_default_instance_;
PROTOBUF_CONSTEXPR S_ASSASSIN_Q::S_ASSASSIN_Q(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , z_(0)
  , pitch_(0)
  , yaw_(0)
  , roll_(0){}
struct S_ASSASSIN_QDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ASSASSIN_QDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ASSASSIN_QDefaultTypeInternal() {}
  union {
    S_ASSASSIN_Q _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ASSASSIN_QDefaultTypeInternal _S_ASSASSIN_Q_default_instance_;
PROTOBUF_CONSTEXPR C_Assassin_E::C_Assassin_E(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , z_(0){}
struct C_Assassin_EDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_Assassin_EDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_Assassin_EDefaultTypeInternal() {}
  union {
    C_Assassin_E _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_Assassin_EDefaultTypeInternal _C_Assassin_E_default_instance_;
PROTOBUF_CONSTEXPR S_Assassin_E::S_Assassin_E(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , z_(0){}
struct S_Assassin_EDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_Assassin_EDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_Assassin_EDefaultTypeInternal() {}
  union {
    S_Assassin_E _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_Assassin_EDefaultTypeInternal _S_Assassin_E_default_instance_;
PROTOBUF_CONSTEXPR C_ASSASSIN_R::C_ASSASSIN_R(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_ASSASSIN_RDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ASSASSIN_RDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ASSASSIN_RDefaultTypeInternal() {}
  union {
    C_ASSASSIN_R _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ASSASSIN_RDefaultTypeInternal _C_ASSASSIN_R_default_instance_;
PROTOBUF_CONSTEXPR S_ASSASSIN_R::S_ASSASSIN_R(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_ASSASSIN_RDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ASSASSIN_RDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ASSASSIN_RDefaultTypeInternal() {}
  union {
    S_ASSASSIN_R _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ASSASSIN_RDefaultTypeInternal _S_ASSASSIN_R_default_instance_;
PROTOBUF_CONSTEXPR C_ASSASSIN_LS::C_ASSASSIN_LS(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_ASSASSIN_LSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ASSASSIN_LSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ASSASSIN_LSDefaultTypeInternal() {}
  union {
    C_ASSASSIN_LS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ASSASSIN_LSDefaultTypeInternal _C_ASSASSIN_LS_default_instance_;
PROTOBUF_CONSTEXPR S_ASSASSIN_LS::S_ASSASSIN_LS(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_ASSASSIN_LSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ASSASSIN_LSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ASSASSIN_LSDefaultTypeInternal() {}
  union {
    S_ASSASSIN_LS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ASSASSIN_LSDefaultTypeInternal _S_ASSASSIN_LS_default_instance_;
PROTOBUF_CONSTEXPR C_Assassin_LS_Off::C_Assassin_LS_Off(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_Assassin_LS_OffDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_Assassin_LS_OffDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_Assassin_LS_OffDefaultTypeInternal() {}
  union {
    C_Assassin_LS_Off _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_Assassin_LS_OffDefaultTypeInternal _C_Assassin_LS_Off_default_instance_;
PROTOBUF_CONSTEXPR S_Assassin_LS_Off::S_Assassin_LS_Off(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Assassin_LS_OffDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_Assassin_LS_OffDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_Assassin_LS_OffDefaultTypeInternal() {}
  union {
    S_Assassin_LS_Off _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_Assassin_LS_OffDefaultTypeInternal _S_Assassin_LS_Off_default_instance_;
PROTOBUF_CONSTEXPR C_Archor_Attack::C_Archor_Attack(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , start_x_(0)
  , start_y_(0)
  , start_z_(0)
  , end_x_(0)
  , end_y_(0)
  , end_z_(0){}
struct C_Archor_AttackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_Archor_AttackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_Archor_AttackDefaultTypeInternal() {}
  union {
    C_Archor_Attack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_Archor_AttackDefaultTypeInternal _C_Archor_Attack_default_instance_;
PROTOBUF_CONSTEXPR S_Archor_Attack::S_Archor_Attack(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , start_x_(0)
  , start_y_(0)
  , start_z_(0)
  , end_x_(0)
  , end_y_(0)
  , end_z_(0)
  , r_mode_(0)
  , ls_mode_(0){}
struct S_Archor_AttackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_Archor_AttackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_Archor_AttackDefaultTypeInternal() {}
  union {
    S_Archor_Attack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_Archor_AttackDefaultTypeInternal _S_Archor_Attack_default_instance_;
PROTOBUF_CONSTEXPR C_Archor_Q_Charging::C_Archor_Q_Charging(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_Archor_Q_ChargingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_Archor_Q_ChargingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_Archor_Q_ChargingDefaultTypeInternal() {}
  union {
    C_Archor_Q_Charging _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_Archor_Q_ChargingDefaultTypeInternal _C_Archor_Q_Charging_default_instance_;
PROTOBUF_CONSTEXPR S_Archor_Q_Charging::S_Archor_Q_Charging(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , r_mode_(0){}
struct S_Archor_Q_ChargingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_Archor_Q_ChargingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_Archor_Q_ChargingDefaultTypeInternal() {}
  union {
    S_Archor_Q_Charging _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_Archor_Q_ChargingDefaultTypeInternal _S_Archor_Q_Charging_default_instance_;
PROTOBUF_CONSTEXPR C_Archor_Q_Shot::C_Archor_Q_Shot(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , start_x_(0)
  , start_y_(0)
  , start_z_(0)
  , end_x_(0)
  , end_y_(0)
  , end_z_(0){}
struct C_Archor_Q_ShotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_Archor_Q_ShotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_Archor_Q_ShotDefaultTypeInternal() {}
  union {
    C_Archor_Q_Shot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_Archor_Q_ShotDefaultTypeInternal _C_Archor_Q_Shot_default_instance_;
PROTOBUF_CONSTEXPR S_Archor_Q_Shot::S_Archor_Q_Shot(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , start_x_(0)
  , start_y_(0)
  , start_z_(0)
  , end_x_(0)
  , end_y_(0)
  , end_z_(0){}
struct S_Archor_Q_ShotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_Archor_Q_ShotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_Archor_Q_ShotDefaultTypeInternal() {}
  union {
    S_Archor_Q_Shot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_Archor_Q_ShotDefaultTypeInternal _S_Archor_Q_Shot_default_instance_;
PROTOBUF_CONSTEXPR C_Archor_E::C_Archor_E(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , z_(0){}
struct C_Archor_EDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_Archor_EDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_Archor_EDefaultTypeInternal() {}
  union {
    C_Archor_E _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_Archor_EDefaultTypeInternal _C_Archor_E_default_instance_;
PROTOBUF_CONSTEXPR S_Archor_E::S_Archor_E(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u})
  , x_(0)
  , y_(0)
  , z_(0){}
struct S_Archor_EDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_Archor_EDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_Archor_EDefaultTypeInternal() {}
  union {
    S_Archor_E _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_Archor_EDefaultTypeInternal _S_Archor_E_default_instance_;
PROTOBUF_CONSTEXPR C_Archor_R::C_Archor_R(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_Archor_RDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_Archor_RDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_Archor_RDefaultTypeInternal() {}
  union {
    C_Archor_R _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_Archor_RDefaultTypeInternal _C_Archor_R_default_instance_;
PROTOBUF_CONSTEXPR S_Archor_R::S_Archor_R(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Archor_RDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_Archor_RDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_Archor_RDefaultTypeInternal() {}
  union {
    S_Archor_R _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_Archor_RDefaultTypeInternal _S_Archor_R_default_instance_;
PROTOBUF_CONSTEXPR C_Archor_LS::C_Archor_LS(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct C_Archor_LSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_Archor_LSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_Archor_LSDefaultTypeInternal() {}
  union {
    C_Archor_LS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_Archor_LSDefaultTypeInternal _C_Archor_LS_default_instance_;
PROTOBUF_CONSTEXPR S_Archor_LS::S_Archor_LS(
    ::_pbi::ConstantInitialized)
  : object_id_(uint64_t{0u}){}
struct S_Archor_LSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_Archor_LSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_Archor_LSDefaultTypeInternal() {}
  union {
    S_Archor_LS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_Archor_LSDefaultTypeInternal _S_Archor_LS_default_instance_;
}  // namespace skill
static ::_pb::Metadata file_level_metadata_Skill_2eproto[35];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Skill_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Skill_2eproto = nullptr;

const uint32_t TableStruct_Skill_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_CoolTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_CoolTime, time_),
  PROTOBUF_FIELD_OFFSET(::skill::S_CoolTime, skill_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_Attack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_Attack, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_Attack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_Attack, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_Q, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_Q, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_Q, target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_Q, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_Q, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_Q, target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_E, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_E, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_E, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_E, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_R, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_R, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_R, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_R, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_LS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_LS, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_LS, x_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_LS, y_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_LS, z_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Warrior_LS, yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_LS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_LS, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_LS, x_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_LS, y_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_LS, z_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Warrior_LS, yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Attack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Attack, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Attack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Attack, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Q, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Q, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Q, x_),
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Q, y_),
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Q, z_),
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Q, pitch_),
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Q, yaw_),
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_Q, roll_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Q, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Q, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Q, x_),
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Q, y_),
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Q, z_),
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Q, pitch_),
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Q, yaw_),
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_Q, roll_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Assassin_E, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::C_Assassin_E, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Assassin_E, x_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Assassin_E, y_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Assassin_E, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Assassin_E, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_Assassin_E, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Assassin_E, x_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Assassin_E, y_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Assassin_E, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_R, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_R, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_R, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_R, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_LS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::C_ASSASSIN_LS, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_LS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_ASSASSIN_LS, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Assassin_LS_Off, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::C_Assassin_LS_Off, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Assassin_LS_Off, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_Assassin_LS_Off, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Attack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Attack, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Attack, start_x_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Attack, start_y_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Attack, start_z_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Attack, end_x_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Attack, end_y_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Attack, end_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, start_x_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, start_y_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, start_z_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, end_x_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, end_y_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, end_z_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, r_mode_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Attack, ls_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Charging, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Charging, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Charging, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Charging, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Charging, r_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Shot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Shot, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Shot, start_x_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Shot, start_y_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Shot, start_z_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Shot, end_x_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Shot, end_y_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_Q_Shot, end_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Shot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Shot, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Shot, start_x_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Shot, start_y_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Shot, start_z_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Shot, end_x_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Shot, end_y_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_Q_Shot, end_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_E, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_E, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_E, x_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_E, y_),
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_E, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_E, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_E, object_id_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_E, x_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_E, y_),
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_E, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_R, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_R, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_R, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_R, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_LS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::C_Archor_LS, object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_LS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::skill::S_Archor_LS, object_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::skill::S_CoolTime)},
  { 8, -1, -1, sizeof(::skill::C_Warrior_Attack)},
  { 15, -1, -1, sizeof(::skill::S_Warrior_Attack)},
  { 22, -1, -1, sizeof(::skill::C_Warrior_Q)},
  { 30, -1, -1, sizeof(::skill::S_Warrior_Q)},
  { 38, -1, -1, sizeof(::skill::C_Warrior_E)},
  { 45, -1, -1, sizeof(::skill::S_Warrior_E)},
  { 52, -1, -1, sizeof(::skill::C_Warrior_R)},
  { 59, -1, -1, sizeof(::skill::S_Warrior_R)},
  { 66, -1, -1, sizeof(::skill::C_Warrior_LS)},
  { 77, -1, -1, sizeof(::skill::S_Warrior_LS)},
  { 88, -1, -1, sizeof(::skill::C_ASSASSIN_Attack)},
  { 95, -1, -1, sizeof(::skill::S_ASSASSIN_Attack)},
  { 102, -1, -1, sizeof(::skill::C_ASSASSIN_Q)},
  { 115, -1, -1, sizeof(::skill::S_ASSASSIN_Q)},
  { 128, -1, -1, sizeof(::skill::C_Assassin_E)},
  { 138, -1, -1, sizeof(::skill::S_Assassin_E)},
  { 148, -1, -1, sizeof(::skill::C_ASSASSIN_R)},
  { 155, -1, -1, sizeof(::skill::S_ASSASSIN_R)},
  { 162, -1, -1, sizeof(::skill::C_ASSASSIN_LS)},
  { 169, -1, -1, sizeof(::skill::S_ASSASSIN_LS)},
  { 176, -1, -1, sizeof(::skill::C_Assassin_LS_Off)},
  { 183, -1, -1, sizeof(::skill::S_Assassin_LS_Off)},
  { 190, -1, -1, sizeof(::skill::C_Archor_Attack)},
  { 203, -1, -1, sizeof(::skill::S_Archor_Attack)},
  { 218, -1, -1, sizeof(::skill::C_Archor_Q_Charging)},
  { 225, -1, -1, sizeof(::skill::S_Archor_Q_Charging)},
  { 233, -1, -1, sizeof(::skill::C_Archor_Q_Shot)},
  { 246, -1, -1, sizeof(::skill::S_Archor_Q_Shot)},
  { 259, -1, -1, sizeof(::skill::C_Archor_E)},
  { 269, -1, -1, sizeof(::skill::S_Archor_E)},
  { 279, -1, -1, sizeof(::skill::C_Archor_R)},
  { 286, -1, -1, sizeof(::skill::S_Archor_R)},
  { 293, -1, -1, sizeof(::skill::C_Archor_LS)},
  { 300, -1, -1, sizeof(::skill::S_Archor_LS)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::skill::_S_CoolTime_default_instance_._instance,
  &::skill::_C_Warrior_Attack_default_instance_._instance,
  &::skill::_S_Warrior_Attack_default_instance_._instance,
  &::skill::_C_Warrior_Q_default_instance_._instance,
  &::skill::_S_Warrior_Q_default_instance_._instance,
  &::skill::_C_Warrior_E_default_instance_._instance,
  &::skill::_S_Warrior_E_default_instance_._instance,
  &::skill::_C_Warrior_R_default_instance_._instance,
  &::skill::_S_Warrior_R_default_instance_._instance,
  &::skill::_C_Warrior_LS_default_instance_._instance,
  &::skill::_S_Warrior_LS_default_instance_._instance,
  &::skill::_C_ASSASSIN_Attack_default_instance_._instance,
  &::skill::_S_ASSASSIN_Attack_default_instance_._instance,
  &::skill::_C_ASSASSIN_Q_default_instance_._instance,
  &::skill::_S_ASSASSIN_Q_default_instance_._instance,
  &::skill::_C_Assassin_E_default_instance_._instance,
  &::skill::_S_Assassin_E_default_instance_._instance,
  &::skill::_C_ASSASSIN_R_default_instance_._instance,
  &::skill::_S_ASSASSIN_R_default_instance_._instance,
  &::skill::_C_ASSASSIN_LS_default_instance_._instance,
  &::skill::_S_ASSASSIN_LS_default_instance_._instance,
  &::skill::_C_Assassin_LS_Off_default_instance_._instance,
  &::skill::_S_Assassin_LS_Off_default_instance_._instance,
  &::skill::_C_Archor_Attack_default_instance_._instance,
  &::skill::_S_Archor_Attack_default_instance_._instance,
  &::skill::_C_Archor_Q_Charging_default_instance_._instance,
  &::skill::_S_Archor_Q_Charging_default_instance_._instance,
  &::skill::_C_Archor_Q_Shot_default_instance_._instance,
  &::skill::_S_Archor_Q_Shot_default_instance_._instance,
  &::skill::_C_Archor_E_default_instance_._instance,
  &::skill::_S_Archor_E_default_instance_._instance,
  &::skill::_C_Archor_R_default_instance_._instance,
  &::skill::_S_Archor_R_default_instance_._instance,
  &::skill::_C_Archor_LS_default_instance_._instance,
  &::skill::_S_Archor_LS_default_instance_._instance,
};

const char descriptor_table_protodef_Skill_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013Skill.proto\022\005skill\"@\n\nS_CoolTime\022\014\n\004ti"
  "me\030\001 \001(\005\022$\n\nskill_type\030\002 \001(\0162\020.skill.SKI"
  "LLTYPE\"%\n\020C_Warrior_Attack\022\021\n\tobject_id\030"
  "\001 \001(\004\"%\n\020S_Warrior_Attack\022\021\n\tobject_id\030\001"
  " \001(\004\"3\n\013C_Warrior_Q\022\021\n\tobject_id\030\001 \001(\004\022\021"
  "\n\ttarget_id\030\002 \001(\004\"3\n\013S_Warrior_Q\022\021\n\tobje"
  "ct_id\030\001 \001(\004\022\021\n\ttarget_id\030\002 \001(\004\" \n\013C_Warr"
  "ior_E\022\021\n\tobject_id\030\001 \001(\004\" \n\013S_Warrior_E\022"
  "\021\n\tobject_id\030\001 \001(\004\" \n\013C_Warrior_R\022\021\n\tobj"
  "ect_id\030\001 \001(\004\" \n\013S_Warrior_R\022\021\n\tobject_id"
  "\030\001 \001(\004\"O\n\014C_Warrior_LS\022\021\n\tobject_id\030\001 \001("
  "\004\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\013\n\003ya"
  "w\030\005 \001(\002\"O\n\014S_Warrior_LS\022\021\n\tobject_id\030\001 \001"
  "(\004\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\013\n\003y"
  "aw\030\005 \001(\002\"&\n\021C_ASSASSIN_Attack\022\021\n\tobject_"
  "id\030\001 \001(\004\"&\n\021S_ASSASSIN_Attack\022\021\n\tobject_"
  "id\030\001 \001(\004\"l\n\014C_ASSASSIN_Q\022\021\n\tobject_id\030\001 "
  "\001(\004\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\r\n\005"
  "pitch\030\005 \001(\002\022\013\n\003yaw\030\006 \001(\002\022\014\n\004roll\030\007 \001(\002\"l"
  "\n\014S_ASSASSIN_Q\022\021\n\tobject_id\030\001 \001(\004\022\t\n\001x\030\002"
  " \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\022\r\n\005pitch\030\005 \001("
  "\002\022\013\n\003yaw\030\006 \001(\002\022\014\n\004roll\030\007 \001(\002\"B\n\014C_Assass"
  "in_E\022\021\n\tobject_id\030\001 \001(\004\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030"
  "\003 \001(\002\022\t\n\001z\030\004 \001(\002\"B\n\014S_Assassin_E\022\021\n\tobje"
  "ct_id\030\001 \001(\004\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004"
  " \001(\002\"!\n\014C_ASSASSIN_R\022\021\n\tobject_id\030\001 \001(\004\""
  "!\n\014S_ASSASSIN_R\022\021\n\tobject_id\030\001 \001(\004\"\"\n\rC_"
  "ASSASSIN_LS\022\021\n\tobject_id\030\001 \001(\004\"\"\n\rS_ASSA"
  "SSIN_LS\022\021\n\tobject_id\030\001 \001(\004\"&\n\021C_Assassin"
  "_LS_Off\022\021\n\tobject_id\030\001 \001(\004\"&\n\021S_Assassin"
  "_LS_Off\022\021\n\tobject_id\030\001 \001(\004\"\204\001\n\017C_Archor_"
  "Attack\022\021\n\tobject_id\030\001 \001(\004\022\017\n\007start_x\030\002 \001"
  "(\002\022\017\n\007start_y\030\003 \001(\002\022\017\n\007start_z\030\004 \001(\002\022\r\n\005"
  "end_x\030\005 \001(\002\022\r\n\005end_y\030\006 \001(\002\022\r\n\005end_z\030\007 \001("
  "\002\"\245\001\n\017S_Archor_Attack\022\021\n\tobject_id\030\001 \001(\004"
  "\022\017\n\007start_x\030\002 \001(\002\022\017\n\007start_y\030\003 \001(\002\022\017\n\007st"
  "art_z\030\004 \001(\002\022\r\n\005end_x\030\005 \001(\002\022\r\n\005end_y\030\006 \001("
  "\002\022\r\n\005end_z\030\007 \001(\002\022\016\n\006R_Mode\030\010 \001(\005\022\017\n\007LS_M"
  "ode\030\t \001(\005\"(\n\023C_Archor_Q_Charging\022\021\n\tobje"
  "ct_id\030\001 \001(\004\"8\n\023S_Archor_Q_Charging\022\021\n\tob"
  "ject_id\030\001 \001(\004\022\016\n\006R_Mode\030\002 \001(\005\"\204\001\n\017C_Arch"
  "or_Q_Shot\022\021\n\tobject_id\030\001 \001(\004\022\017\n\007start_x\030"
  "\002 \001(\002\022\017\n\007start_y\030\003 \001(\002\022\017\n\007start_z\030\004 \001(\002\022"
  "\r\n\005end_x\030\005 \001(\002\022\r\n\005end_y\030\006 \001(\002\022\r\n\005end_z\030\007"
  " \001(\002\"\204\001\n\017S_Archor_Q_Shot\022\021\n\tobject_id\030\001 "
  "\001(\004\022\017\n\007start_x\030\002 \001(\002\022\017\n\007start_y\030\003 \001(\002\022\017\n"
  "\007start_z\030\004 \001(\002\022\r\n\005end_x\030\005 \001(\002\022\r\n\005end_y\030\006"
  " \001(\002\022\r\n\005end_z\030\007 \001(\002\"@\n\nC_Archor_E\022\021\n\tobj"
  "ect_id\030\001 \001(\004\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030"
  "\004 \001(\002\"@\n\nS_Archor_E\022\021\n\tobject_id\030\001 \001(\004\022\t"
  "\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"\037\n\nC_Arc"
  "hor_R\022\021\n\tobject_id\030\001 \001(\004\"\037\n\nS_Archor_R\022\021"
  "\n\tobject_id\030\001 \001(\004\" \n\013C_Archor_LS\022\021\n\tobje"
  "ct_id\030\001 \001(\004\" \n\013S_Archor_LS\022\021\n\tobject_id\030"
  "\001 \001(\004*2\n\tSKILLTYPE\022\010\n\004NONE\020\000\022\005\n\001Q\020\001\022\005\n\001E"
  "\020\002\022\005\n\001R\020\003\022\006\n\002LS\020\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Skill_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Skill_2eproto = {
    false, false, 2225, descriptor_table_protodef_Skill_2eproto,
    "Skill.proto",
    &descriptor_table_Skill_2eproto_once, nullptr, 0, 35,
    schemas, file_default_instances, TableStruct_Skill_2eproto::offsets,
    file_level_metadata_Skill_2eproto, file_level_enum_descriptors_Skill_2eproto,
    file_level_service_descriptors_Skill_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Skill_2eproto_getter() {
  return &descriptor_table_Skill_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Skill_2eproto(&descriptor_table_Skill_2eproto);
namespace skill {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SKILLTYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Skill_2eproto);
  return file_level_enum_descriptors_Skill_2eproto[0];
}
bool SKILLTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class S_CoolTime::_Internal {
 public:
};

S_CoolTime::S_CoolTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_CoolTime)
}
S_CoolTime::S_CoolTime(const S_CoolTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_type_) -
    reinterpret_cast<char*>(&time_)) + sizeof(skill_type_));
  // @@protoc_insertion_point(copy_constructor:skill.S_CoolTime)
}

inline void S_CoolTime::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&skill_type_) -
    reinterpret_cast<char*>(&time_)) + sizeof(skill_type_));
}

S_CoolTime::~S_CoolTime() {
  // @@protoc_insertion_point(destructor:skill.S_CoolTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CoolTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_CoolTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_CoolTime::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_CoolTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_type_) -
      reinterpret_cast<char*>(&time_)) + sizeof(skill_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CoolTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .skill.SKILLTYPE skill_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_skill_type(static_cast<::skill::SKILLTYPE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CoolTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_CoolTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_time(), target);
  }

  // .skill.SKILLTYPE skill_type = 2;
  if (this->_internal_skill_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_skill_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_CoolTime)
  return target;
}

size_t S_CoolTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_CoolTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time());
  }

  // .skill.SKILLTYPE skill_type = 2;
  if (this->_internal_skill_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_skill_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CoolTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_CoolTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CoolTime::GetClassData() const { return &_class_data_; }

void S_CoolTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_CoolTime *>(to)->MergeFrom(
      static_cast<const S_CoolTime &>(from));
}


void S_CoolTime::MergeFrom(const S_CoolTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_CoolTime)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from._internal_skill_type() != 0) {
    _internal_set_skill_type(from._internal_skill_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CoolTime::CopyFrom(const S_CoolTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_CoolTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CoolTime::IsInitialized() const {
  return true;
}

void S_CoolTime::InternalSwap(S_CoolTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_CoolTime, skill_type_)
      + sizeof(S_CoolTime::skill_type_)
      - PROTOBUF_FIELD_OFFSET(S_CoolTime, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CoolTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[0]);
}

// ===================================================================

class C_Warrior_Attack::_Internal {
 public:
};

C_Warrior_Attack::C_Warrior_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.C_Warrior_Attack)
}
C_Warrior_Attack::C_Warrior_Attack(const C_Warrior_Attack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_Warrior_Attack)
}

inline void C_Warrior_Attack::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_Warrior_Attack::~C_Warrior_Attack() {
  // @@protoc_insertion_point(destructor:skill.C_Warrior_Attack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Warrior_Attack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Warrior_Attack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Warrior_Attack::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Warrior_Attack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Warrior_Attack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Warrior_Attack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Warrior_Attack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Warrior_Attack)
  return target;
}

size_t C_Warrior_Attack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Warrior_Attack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Warrior_Attack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Warrior_Attack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Warrior_Attack::GetClassData() const { return &_class_data_; }

void C_Warrior_Attack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Warrior_Attack *>(to)->MergeFrom(
      static_cast<const C_Warrior_Attack &>(from));
}


void C_Warrior_Attack::MergeFrom(const C_Warrior_Attack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Warrior_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Warrior_Attack::CopyFrom(const C_Warrior_Attack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Warrior_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Warrior_Attack::IsInitialized() const {
  return true;
}

void C_Warrior_Attack::InternalSwap(C_Warrior_Attack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Warrior_Attack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[1]);
}

// ===================================================================

class S_Warrior_Attack::_Internal {
 public:
};

S_Warrior_Attack::S_Warrior_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_Warrior_Attack)
}
S_Warrior_Attack::S_Warrior_Attack(const S_Warrior_Attack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_Warrior_Attack)
}

inline void S_Warrior_Attack::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Warrior_Attack::~S_Warrior_Attack() {
  // @@protoc_insertion_point(destructor:skill.S_Warrior_Attack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Warrior_Attack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Warrior_Attack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Warrior_Attack::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Warrior_Attack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Warrior_Attack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Warrior_Attack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Warrior_Attack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Warrior_Attack)
  return target;
}

size_t S_Warrior_Attack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Warrior_Attack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Warrior_Attack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Warrior_Attack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Warrior_Attack::GetClassData() const { return &_class_data_; }

void S_Warrior_Attack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Warrior_Attack *>(to)->MergeFrom(
      static_cast<const S_Warrior_Attack &>(from));
}


void S_Warrior_Attack::MergeFrom(const S_Warrior_Attack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Warrior_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Warrior_Attack::CopyFrom(const S_Warrior_Attack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Warrior_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Warrior_Attack::IsInitialized() const {
  return true;
}

void S_Warrior_Attack::InternalSwap(S_Warrior_Attack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Warrior_Attack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[2]);
}

// ===================================================================

class C_Warrior_Q::_Internal {
 public:
};

C_Warrior_Q::C_Warrior_Q(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.C_Warrior_Q)
}
C_Warrior_Q::C_Warrior_Q(const C_Warrior_Q& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(target_id_));
  // @@protoc_insertion_point(copy_constructor:skill.C_Warrior_Q)
}

inline void C_Warrior_Q::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(target_id_));
}

C_Warrior_Q::~C_Warrior_Q() {
  // @@protoc_insertion_point(destructor:skill.C_Warrior_Q)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Warrior_Q::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Warrior_Q::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Warrior_Q::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Warrior_Q)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(target_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Warrior_Q::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Warrior_Q::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Warrior_Q)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 target_id = 2;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_target_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Warrior_Q)
  return target;
}

size_t C_Warrior_Q::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Warrior_Q)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 target_id = 2;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_target_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Warrior_Q::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Warrior_Q::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Warrior_Q::GetClassData() const { return &_class_data_; }

void C_Warrior_Q::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Warrior_Q *>(to)->MergeFrom(
      static_cast<const C_Warrior_Q &>(from));
}


void C_Warrior_Q::MergeFrom(const C_Warrior_Q& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Warrior_Q)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Warrior_Q::CopyFrom(const C_Warrior_Q& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Warrior_Q)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Warrior_Q::IsInitialized() const {
  return true;
}

void C_Warrior_Q::InternalSwap(C_Warrior_Q* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Warrior_Q, target_id_)
      + sizeof(C_Warrior_Q::target_id_)
      - PROTOBUF_FIELD_OFFSET(C_Warrior_Q, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Warrior_Q::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[3]);
}

// ===================================================================

class S_Warrior_Q::_Internal {
 public:
};

S_Warrior_Q::S_Warrior_Q(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_Warrior_Q)
}
S_Warrior_Q::S_Warrior_Q(const S_Warrior_Q& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(target_id_));
  // @@protoc_insertion_point(copy_constructor:skill.S_Warrior_Q)
}

inline void S_Warrior_Q::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(target_id_));
}

S_Warrior_Q::~S_Warrior_Q() {
  // @@protoc_insertion_point(destructor:skill.S_Warrior_Q)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Warrior_Q::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Warrior_Q::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Warrior_Q::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Warrior_Q)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(target_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Warrior_Q::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Warrior_Q::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Warrior_Q)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 target_id = 2;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_target_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Warrior_Q)
  return target;
}

size_t S_Warrior_Q::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Warrior_Q)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 target_id = 2;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_target_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Warrior_Q::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Warrior_Q::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Warrior_Q::GetClassData() const { return &_class_data_; }

void S_Warrior_Q::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Warrior_Q *>(to)->MergeFrom(
      static_cast<const S_Warrior_Q &>(from));
}


void S_Warrior_Q::MergeFrom(const S_Warrior_Q& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Warrior_Q)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Warrior_Q::CopyFrom(const S_Warrior_Q& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Warrior_Q)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Warrior_Q::IsInitialized() const {
  return true;
}

void S_Warrior_Q::InternalSwap(S_Warrior_Q* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Warrior_Q, target_id_)
      + sizeof(S_Warrior_Q::target_id_)
      - PROTOBUF_FIELD_OFFSET(S_Warrior_Q, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Warrior_Q::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[4]);
}

// ===================================================================

class C_Warrior_E::_Internal {
 public:
};

C_Warrior_E::C_Warrior_E(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.C_Warrior_E)
}
C_Warrior_E::C_Warrior_E(const C_Warrior_E& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_Warrior_E)
}

inline void C_Warrior_E::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_Warrior_E::~C_Warrior_E() {
  // @@protoc_insertion_point(destructor:skill.C_Warrior_E)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Warrior_E::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Warrior_E::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Warrior_E::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Warrior_E)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Warrior_E::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Warrior_E::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Warrior_E)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Warrior_E)
  return target;
}

size_t C_Warrior_E::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Warrior_E)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Warrior_E::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Warrior_E::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Warrior_E::GetClassData() const { return &_class_data_; }

void C_Warrior_E::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Warrior_E *>(to)->MergeFrom(
      static_cast<const C_Warrior_E &>(from));
}


void C_Warrior_E::MergeFrom(const C_Warrior_E& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Warrior_E)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Warrior_E::CopyFrom(const C_Warrior_E& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Warrior_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Warrior_E::IsInitialized() const {
  return true;
}

void C_Warrior_E::InternalSwap(C_Warrior_E* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Warrior_E::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[5]);
}

// ===================================================================

class S_Warrior_E::_Internal {
 public:
};

S_Warrior_E::S_Warrior_E(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_Warrior_E)
}
S_Warrior_E::S_Warrior_E(const S_Warrior_E& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_Warrior_E)
}

inline void S_Warrior_E::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Warrior_E::~S_Warrior_E() {
  // @@protoc_insertion_point(destructor:skill.S_Warrior_E)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Warrior_E::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Warrior_E::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Warrior_E::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Warrior_E)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Warrior_E::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Warrior_E::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Warrior_E)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Warrior_E)
  return target;
}

size_t S_Warrior_E::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Warrior_E)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Warrior_E::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Warrior_E::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Warrior_E::GetClassData() const { return &_class_data_; }

void S_Warrior_E::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Warrior_E *>(to)->MergeFrom(
      static_cast<const S_Warrior_E &>(from));
}


void S_Warrior_E::MergeFrom(const S_Warrior_E& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Warrior_E)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Warrior_E::CopyFrom(const S_Warrior_E& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Warrior_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Warrior_E::IsInitialized() const {
  return true;
}

void S_Warrior_E::InternalSwap(S_Warrior_E* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Warrior_E::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[6]);
}

// ===================================================================

class C_Warrior_R::_Internal {
 public:
};

C_Warrior_R::C_Warrior_R(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.C_Warrior_R)
}
C_Warrior_R::C_Warrior_R(const C_Warrior_R& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_Warrior_R)
}

inline void C_Warrior_R::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_Warrior_R::~C_Warrior_R() {
  // @@protoc_insertion_point(destructor:skill.C_Warrior_R)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Warrior_R::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Warrior_R::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Warrior_R::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Warrior_R)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Warrior_R::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Warrior_R::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Warrior_R)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Warrior_R)
  return target;
}

size_t C_Warrior_R::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Warrior_R)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Warrior_R::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Warrior_R::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Warrior_R::GetClassData() const { return &_class_data_; }

void C_Warrior_R::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Warrior_R *>(to)->MergeFrom(
      static_cast<const C_Warrior_R &>(from));
}


void C_Warrior_R::MergeFrom(const C_Warrior_R& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Warrior_R)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Warrior_R::CopyFrom(const C_Warrior_R& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Warrior_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Warrior_R::IsInitialized() const {
  return true;
}

void C_Warrior_R::InternalSwap(C_Warrior_R* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Warrior_R::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[7]);
}

// ===================================================================

class S_Warrior_R::_Internal {
 public:
};

S_Warrior_R::S_Warrior_R(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_Warrior_R)
}
S_Warrior_R::S_Warrior_R(const S_Warrior_R& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_Warrior_R)
}

inline void S_Warrior_R::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Warrior_R::~S_Warrior_R() {
  // @@protoc_insertion_point(destructor:skill.S_Warrior_R)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Warrior_R::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Warrior_R::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Warrior_R::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Warrior_R)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Warrior_R::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Warrior_R::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Warrior_R)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Warrior_R)
  return target;
}

size_t S_Warrior_R::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Warrior_R)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Warrior_R::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Warrior_R::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Warrior_R::GetClassData() const { return &_class_data_; }

void S_Warrior_R::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Warrior_R *>(to)->MergeFrom(
      static_cast<const S_Warrior_R &>(from));
}


void S_Warrior_R::MergeFrom(const S_Warrior_R& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Warrior_R)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Warrior_R::CopyFrom(const S_Warrior_R& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Warrior_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Warrior_R::IsInitialized() const {
  return true;
}

void S_Warrior_R::InternalSwap(S_Warrior_R* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Warrior_R::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[8]);
}

// ===================================================================

class C_Warrior_LS::_Internal {
 public:
};

C_Warrior_LS::C_Warrior_LS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.C_Warrior_LS)
}
C_Warrior_LS::C_Warrior_LS(const C_Warrior_LS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:skill.C_Warrior_LS)
}

inline void C_Warrior_LS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(yaw_));
}

C_Warrior_LS::~C_Warrior_LS() {
  // @@protoc_insertion_point(destructor:skill.C_Warrior_LS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Warrior_LS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Warrior_LS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Warrior_LS::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Warrior_LS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Warrior_LS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Warrior_LS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Warrior_LS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // float yaw = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Warrior_LS)
  return target;
}

size_t C_Warrior_LS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Warrior_LS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Warrior_LS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Warrior_LS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Warrior_LS::GetClassData() const { return &_class_data_; }

void C_Warrior_LS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Warrior_LS *>(to)->MergeFrom(
      static_cast<const C_Warrior_LS &>(from));
}


void C_Warrior_LS::MergeFrom(const C_Warrior_LS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Warrior_LS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _internal_set_yaw(from._internal_yaw());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Warrior_LS::CopyFrom(const C_Warrior_LS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Warrior_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Warrior_LS::IsInitialized() const {
  return true;
}

void C_Warrior_LS::InternalSwap(C_Warrior_LS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Warrior_LS, yaw_)
      + sizeof(C_Warrior_LS::yaw_)
      - PROTOBUF_FIELD_OFFSET(C_Warrior_LS, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Warrior_LS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[9]);
}

// ===================================================================

class S_Warrior_LS::_Internal {
 public:
};

S_Warrior_LS::S_Warrior_LS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_Warrior_LS)
}
S_Warrior_LS::S_Warrior_LS(const S_Warrior_LS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:skill.S_Warrior_LS)
}

inline void S_Warrior_LS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(yaw_));
}

S_Warrior_LS::~S_Warrior_LS() {
  // @@protoc_insertion_point(destructor:skill.S_Warrior_LS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Warrior_LS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Warrior_LS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Warrior_LS::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Warrior_LS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Warrior_LS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Warrior_LS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Warrior_LS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // float yaw = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Warrior_LS)
  return target;
}

size_t S_Warrior_LS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Warrior_LS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Warrior_LS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Warrior_LS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Warrior_LS::GetClassData() const { return &_class_data_; }

void S_Warrior_LS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Warrior_LS *>(to)->MergeFrom(
      static_cast<const S_Warrior_LS &>(from));
}


void S_Warrior_LS::MergeFrom(const S_Warrior_LS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Warrior_LS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _internal_set_yaw(from._internal_yaw());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Warrior_LS::CopyFrom(const S_Warrior_LS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Warrior_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Warrior_LS::IsInitialized() const {
  return true;
}

void S_Warrior_LS::InternalSwap(S_Warrior_LS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Warrior_LS, yaw_)
      + sizeof(S_Warrior_LS::yaw_)
      - PROTOBUF_FIELD_OFFSET(S_Warrior_LS, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Warrior_LS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[10]);
}

// ===================================================================

class C_ASSASSIN_Attack::_Internal {
 public:
};

C_ASSASSIN_Attack::C_ASSASSIN_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.C_ASSASSIN_Attack)
}
C_ASSASSIN_Attack::C_ASSASSIN_Attack(const C_ASSASSIN_Attack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_ASSASSIN_Attack)
}

inline void C_ASSASSIN_Attack::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_ASSASSIN_Attack::~C_ASSASSIN_Attack() {
  // @@protoc_insertion_point(destructor:skill.C_ASSASSIN_Attack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ASSASSIN_Attack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ASSASSIN_Attack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ASSASSIN_Attack::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_ASSASSIN_Attack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ASSASSIN_Attack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ASSASSIN_Attack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_ASSASSIN_Attack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_ASSASSIN_Attack)
  return target;
}

size_t C_ASSASSIN_Attack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_ASSASSIN_Attack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ASSASSIN_Attack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_ASSASSIN_Attack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ASSASSIN_Attack::GetClassData() const { return &_class_data_; }

void C_ASSASSIN_Attack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_ASSASSIN_Attack *>(to)->MergeFrom(
      static_cast<const C_ASSASSIN_Attack &>(from));
}


void C_ASSASSIN_Attack::MergeFrom(const C_ASSASSIN_Attack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_ASSASSIN_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ASSASSIN_Attack::CopyFrom(const C_ASSASSIN_Attack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_ASSASSIN_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ASSASSIN_Attack::IsInitialized() const {
  return true;
}

void C_ASSASSIN_Attack::InternalSwap(C_ASSASSIN_Attack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ASSASSIN_Attack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[11]);
}

// ===================================================================

class S_ASSASSIN_Attack::_Internal {
 public:
};

S_ASSASSIN_Attack::S_ASSASSIN_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_ASSASSIN_Attack)
}
S_ASSASSIN_Attack::S_ASSASSIN_Attack(const S_ASSASSIN_Attack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_ASSASSIN_Attack)
}

inline void S_ASSASSIN_Attack::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_ASSASSIN_Attack::~S_ASSASSIN_Attack() {
  // @@protoc_insertion_point(destructor:skill.S_ASSASSIN_Attack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ASSASSIN_Attack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ASSASSIN_Attack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ASSASSIN_Attack::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_ASSASSIN_Attack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ASSASSIN_Attack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ASSASSIN_Attack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_ASSASSIN_Attack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_ASSASSIN_Attack)
  return target;
}

size_t S_ASSASSIN_Attack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_ASSASSIN_Attack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ASSASSIN_Attack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ASSASSIN_Attack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ASSASSIN_Attack::GetClassData() const { return &_class_data_; }

void S_ASSASSIN_Attack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ASSASSIN_Attack *>(to)->MergeFrom(
      static_cast<const S_ASSASSIN_Attack &>(from));
}


void S_ASSASSIN_Attack::MergeFrom(const S_ASSASSIN_Attack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_ASSASSIN_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ASSASSIN_Attack::CopyFrom(const S_ASSASSIN_Attack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_ASSASSIN_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ASSASSIN_Attack::IsInitialized() const {
  return true;
}

void S_ASSASSIN_Attack::InternalSwap(S_ASSASSIN_Attack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ASSASSIN_Attack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[12]);
}

// ===================================================================

class C_ASSASSIN_Q::_Internal {
 public:
};

C_ASSASSIN_Q::C_ASSASSIN_Q(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.C_ASSASSIN_Q)
}
C_ASSASSIN_Q::C_ASSASSIN_Q(const C_ASSASSIN_Q& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:skill.C_ASSASSIN_Q)
}

inline void C_ASSASSIN_Q::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(roll_));
}

C_ASSASSIN_Q::~C_ASSASSIN_Q() {
  // @@protoc_insertion_point(destructor:skill.C_ASSASSIN_Q)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ASSASSIN_Q::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ASSASSIN_Q::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ASSASSIN_Q::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_ASSASSIN_Q)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ASSASSIN_Q::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float roll = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ASSASSIN_Q::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_ASSASSIN_Q)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // float pitch = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_pitch(), target);
  }

  // float yaw = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_yaw(), target);
  }

  // float roll = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_ASSASSIN_Q)
  return target;
}

size_t C_ASSASSIN_Q::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_ASSASSIN_Q)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // float roll = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ASSASSIN_Q::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_ASSASSIN_Q::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ASSASSIN_Q::GetClassData() const { return &_class_data_; }

void C_ASSASSIN_Q::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_ASSASSIN_Q *>(to)->MergeFrom(
      static_cast<const C_ASSASSIN_Q &>(from));
}


void C_ASSASSIN_Q::MergeFrom(const C_ASSASSIN_Q& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_ASSASSIN_Q)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _internal_set_roll(from._internal_roll());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ASSASSIN_Q::CopyFrom(const C_ASSASSIN_Q& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_ASSASSIN_Q)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ASSASSIN_Q::IsInitialized() const {
  return true;
}

void C_ASSASSIN_Q::InternalSwap(C_ASSASSIN_Q* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_ASSASSIN_Q, roll_)
      + sizeof(C_ASSASSIN_Q::roll_)
      - PROTOBUF_FIELD_OFFSET(C_ASSASSIN_Q, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ASSASSIN_Q::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[13]);
}

// ===================================================================

class S_ASSASSIN_Q::_Internal {
 public:
};

S_ASSASSIN_Q::S_ASSASSIN_Q(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_ASSASSIN_Q)
}
S_ASSASSIN_Q::S_ASSASSIN_Q(const S_ASSASSIN_Q& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(roll_));
  // @@protoc_insertion_point(copy_constructor:skill.S_ASSASSIN_Q)
}

inline void S_ASSASSIN_Q::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roll_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(roll_));
}

S_ASSASSIN_Q::~S_ASSASSIN_Q() {
  // @@protoc_insertion_point(destructor:skill.S_ASSASSIN_Q)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ASSASSIN_Q::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ASSASSIN_Q::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ASSASSIN_Q::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_ASSASSIN_Q)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ASSASSIN_Q::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float roll = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ASSASSIN_Q::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_ASSASSIN_Q)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  // float pitch = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_pitch(), target);
  }

  // float yaw = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_yaw(), target);
  }

  // float roll = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_ASSASSIN_Q)
  return target;
}

size_t S_ASSASSIN_Q::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_ASSASSIN_Q)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // float roll = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ASSASSIN_Q::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ASSASSIN_Q::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ASSASSIN_Q::GetClassData() const { return &_class_data_; }

void S_ASSASSIN_Q::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ASSASSIN_Q *>(to)->MergeFrom(
      static_cast<const S_ASSASSIN_Q &>(from));
}


void S_ASSASSIN_Q::MergeFrom(const S_ASSASSIN_Q& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_ASSASSIN_Q)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _internal_set_roll(from._internal_roll());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ASSASSIN_Q::CopyFrom(const S_ASSASSIN_Q& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_ASSASSIN_Q)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ASSASSIN_Q::IsInitialized() const {
  return true;
}

void S_ASSASSIN_Q::InternalSwap(S_ASSASSIN_Q* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ASSASSIN_Q, roll_)
      + sizeof(S_ASSASSIN_Q::roll_)
      - PROTOBUF_FIELD_OFFSET(S_ASSASSIN_Q, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ASSASSIN_Q::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[14]);
}

// ===================================================================

class C_Assassin_E::_Internal {
 public:
};

C_Assassin_E::C_Assassin_E(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.C_Assassin_E)
}
C_Assassin_E::C_Assassin_E(const C_Assassin_E& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:skill.C_Assassin_E)
}

inline void C_Assassin_E::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
}

C_Assassin_E::~C_Assassin_E() {
  // @@protoc_insertion_point(destructor:skill.C_Assassin_E)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Assassin_E::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Assassin_E::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Assassin_E::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Assassin_E)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Assassin_E::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Assassin_E::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Assassin_E)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Assassin_E)
  return target;
}

size_t C_Assassin_E::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Assassin_E)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Assassin_E::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Assassin_E::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Assassin_E::GetClassData() const { return &_class_data_; }

void C_Assassin_E::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Assassin_E *>(to)->MergeFrom(
      static_cast<const C_Assassin_E &>(from));
}


void C_Assassin_E::MergeFrom(const C_Assassin_E& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Assassin_E)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Assassin_E::CopyFrom(const C_Assassin_E& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Assassin_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Assassin_E::IsInitialized() const {
  return true;
}

void C_Assassin_E::InternalSwap(C_Assassin_E* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Assassin_E, z_)
      + sizeof(C_Assassin_E::z_)
      - PROTOBUF_FIELD_OFFSET(C_Assassin_E, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Assassin_E::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[15]);
}

// ===================================================================

class S_Assassin_E::_Internal {
 public:
};

S_Assassin_E::S_Assassin_E(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_Assassin_E)
}
S_Assassin_E::S_Assassin_E(const S_Assassin_E& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:skill.S_Assassin_E)
}

inline void S_Assassin_E::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
}

S_Assassin_E::~S_Assassin_E() {
  // @@protoc_insertion_point(destructor:skill.S_Assassin_E)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Assassin_E::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Assassin_E::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Assassin_E::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Assassin_E)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Assassin_E::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Assassin_E::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Assassin_E)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Assassin_E)
  return target;
}

size_t S_Assassin_E::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Assassin_E)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Assassin_E::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Assassin_E::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Assassin_E::GetClassData() const { return &_class_data_; }

void S_Assassin_E::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Assassin_E *>(to)->MergeFrom(
      static_cast<const S_Assassin_E &>(from));
}


void S_Assassin_E::MergeFrom(const S_Assassin_E& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Assassin_E)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Assassin_E::CopyFrom(const S_Assassin_E& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Assassin_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Assassin_E::IsInitialized() const {
  return true;
}

void S_Assassin_E::InternalSwap(S_Assassin_E* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Assassin_E, z_)
      + sizeof(S_Assassin_E::z_)
      - PROTOBUF_FIELD_OFFSET(S_Assassin_E, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Assassin_E::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[16]);
}

// ===================================================================

class C_ASSASSIN_R::_Internal {
 public:
};

C_ASSASSIN_R::C_ASSASSIN_R(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.C_ASSASSIN_R)
}
C_ASSASSIN_R::C_ASSASSIN_R(const C_ASSASSIN_R& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_ASSASSIN_R)
}

inline void C_ASSASSIN_R::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_ASSASSIN_R::~C_ASSASSIN_R() {
  // @@protoc_insertion_point(destructor:skill.C_ASSASSIN_R)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ASSASSIN_R::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ASSASSIN_R::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ASSASSIN_R::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_ASSASSIN_R)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ASSASSIN_R::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ASSASSIN_R::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_ASSASSIN_R)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_ASSASSIN_R)
  return target;
}

size_t C_ASSASSIN_R::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_ASSASSIN_R)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ASSASSIN_R::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_ASSASSIN_R::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ASSASSIN_R::GetClassData() const { return &_class_data_; }

void C_ASSASSIN_R::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_ASSASSIN_R *>(to)->MergeFrom(
      static_cast<const C_ASSASSIN_R &>(from));
}


void C_ASSASSIN_R::MergeFrom(const C_ASSASSIN_R& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_ASSASSIN_R)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ASSASSIN_R::CopyFrom(const C_ASSASSIN_R& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_ASSASSIN_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ASSASSIN_R::IsInitialized() const {
  return true;
}

void C_ASSASSIN_R::InternalSwap(C_ASSASSIN_R* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ASSASSIN_R::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[17]);
}

// ===================================================================

class S_ASSASSIN_R::_Internal {
 public:
};

S_ASSASSIN_R::S_ASSASSIN_R(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_ASSASSIN_R)
}
S_ASSASSIN_R::S_ASSASSIN_R(const S_ASSASSIN_R& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_ASSASSIN_R)
}

inline void S_ASSASSIN_R::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_ASSASSIN_R::~S_ASSASSIN_R() {
  // @@protoc_insertion_point(destructor:skill.S_ASSASSIN_R)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ASSASSIN_R::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ASSASSIN_R::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ASSASSIN_R::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_ASSASSIN_R)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ASSASSIN_R::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ASSASSIN_R::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_ASSASSIN_R)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_ASSASSIN_R)
  return target;
}

size_t S_ASSASSIN_R::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_ASSASSIN_R)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ASSASSIN_R::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ASSASSIN_R::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ASSASSIN_R::GetClassData() const { return &_class_data_; }

void S_ASSASSIN_R::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ASSASSIN_R *>(to)->MergeFrom(
      static_cast<const S_ASSASSIN_R &>(from));
}


void S_ASSASSIN_R::MergeFrom(const S_ASSASSIN_R& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_ASSASSIN_R)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ASSASSIN_R::CopyFrom(const S_ASSASSIN_R& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_ASSASSIN_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ASSASSIN_R::IsInitialized() const {
  return true;
}

void S_ASSASSIN_R::InternalSwap(S_ASSASSIN_R* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ASSASSIN_R::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[18]);
}

// ===================================================================

class C_ASSASSIN_LS::_Internal {
 public:
};

C_ASSASSIN_LS::C_ASSASSIN_LS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.C_ASSASSIN_LS)
}
C_ASSASSIN_LS::C_ASSASSIN_LS(const C_ASSASSIN_LS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_ASSASSIN_LS)
}

inline void C_ASSASSIN_LS::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_ASSASSIN_LS::~C_ASSASSIN_LS() {
  // @@protoc_insertion_point(destructor:skill.C_ASSASSIN_LS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ASSASSIN_LS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ASSASSIN_LS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_ASSASSIN_LS::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_ASSASSIN_LS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ASSASSIN_LS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ASSASSIN_LS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_ASSASSIN_LS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_ASSASSIN_LS)
  return target;
}

size_t C_ASSASSIN_LS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_ASSASSIN_LS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ASSASSIN_LS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_ASSASSIN_LS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ASSASSIN_LS::GetClassData() const { return &_class_data_; }

void C_ASSASSIN_LS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_ASSASSIN_LS *>(to)->MergeFrom(
      static_cast<const C_ASSASSIN_LS &>(from));
}


void C_ASSASSIN_LS::MergeFrom(const C_ASSASSIN_LS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_ASSASSIN_LS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ASSASSIN_LS::CopyFrom(const C_ASSASSIN_LS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_ASSASSIN_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ASSASSIN_LS::IsInitialized() const {
  return true;
}

void C_ASSASSIN_LS::InternalSwap(C_ASSASSIN_LS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ASSASSIN_LS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[19]);
}

// ===================================================================

class S_ASSASSIN_LS::_Internal {
 public:
};

S_ASSASSIN_LS::S_ASSASSIN_LS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_ASSASSIN_LS)
}
S_ASSASSIN_LS::S_ASSASSIN_LS(const S_ASSASSIN_LS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_ASSASSIN_LS)
}

inline void S_ASSASSIN_LS::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_ASSASSIN_LS::~S_ASSASSIN_LS() {
  // @@protoc_insertion_point(destructor:skill.S_ASSASSIN_LS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ASSASSIN_LS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ASSASSIN_LS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_ASSASSIN_LS::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_ASSASSIN_LS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ASSASSIN_LS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ASSASSIN_LS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_ASSASSIN_LS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_ASSASSIN_LS)
  return target;
}

size_t S_ASSASSIN_LS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_ASSASSIN_LS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ASSASSIN_LS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_ASSASSIN_LS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ASSASSIN_LS::GetClassData() const { return &_class_data_; }

void S_ASSASSIN_LS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_ASSASSIN_LS *>(to)->MergeFrom(
      static_cast<const S_ASSASSIN_LS &>(from));
}


void S_ASSASSIN_LS::MergeFrom(const S_ASSASSIN_LS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_ASSASSIN_LS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ASSASSIN_LS::CopyFrom(const S_ASSASSIN_LS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_ASSASSIN_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ASSASSIN_LS::IsInitialized() const {
  return true;
}

void S_ASSASSIN_LS::InternalSwap(S_ASSASSIN_LS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ASSASSIN_LS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[20]);
}

// ===================================================================

class C_Assassin_LS_Off::_Internal {
 public:
};

C_Assassin_LS_Off::C_Assassin_LS_Off(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.C_Assassin_LS_Off)
}
C_Assassin_LS_Off::C_Assassin_LS_Off(const C_Assassin_LS_Off& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_Assassin_LS_Off)
}

inline void C_Assassin_LS_Off::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_Assassin_LS_Off::~C_Assassin_LS_Off() {
  // @@protoc_insertion_point(destructor:skill.C_Assassin_LS_Off)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Assassin_LS_Off::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Assassin_LS_Off::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Assassin_LS_Off::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Assassin_LS_Off)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Assassin_LS_Off::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Assassin_LS_Off::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Assassin_LS_Off)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Assassin_LS_Off)
  return target;
}

size_t C_Assassin_LS_Off::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Assassin_LS_Off)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Assassin_LS_Off::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Assassin_LS_Off::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Assassin_LS_Off::GetClassData() const { return &_class_data_; }

void C_Assassin_LS_Off::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Assassin_LS_Off *>(to)->MergeFrom(
      static_cast<const C_Assassin_LS_Off &>(from));
}


void C_Assassin_LS_Off::MergeFrom(const C_Assassin_LS_Off& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Assassin_LS_Off)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Assassin_LS_Off::CopyFrom(const C_Assassin_LS_Off& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Assassin_LS_Off)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Assassin_LS_Off::IsInitialized() const {
  return true;
}

void C_Assassin_LS_Off::InternalSwap(C_Assassin_LS_Off* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Assassin_LS_Off::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[21]);
}

// ===================================================================

class S_Assassin_LS_Off::_Internal {
 public:
};

S_Assassin_LS_Off::S_Assassin_LS_Off(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_Assassin_LS_Off)
}
S_Assassin_LS_Off::S_Assassin_LS_Off(const S_Assassin_LS_Off& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_Assassin_LS_Off)
}

inline void S_Assassin_LS_Off::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Assassin_LS_Off::~S_Assassin_LS_Off() {
  // @@protoc_insertion_point(destructor:skill.S_Assassin_LS_Off)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Assassin_LS_Off::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Assassin_LS_Off::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Assassin_LS_Off::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Assassin_LS_Off)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Assassin_LS_Off::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Assassin_LS_Off::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Assassin_LS_Off)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Assassin_LS_Off)
  return target;
}

size_t S_Assassin_LS_Off::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Assassin_LS_Off)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Assassin_LS_Off::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Assassin_LS_Off::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Assassin_LS_Off::GetClassData() const { return &_class_data_; }

void S_Assassin_LS_Off::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Assassin_LS_Off *>(to)->MergeFrom(
      static_cast<const S_Assassin_LS_Off &>(from));
}


void S_Assassin_LS_Off::MergeFrom(const S_Assassin_LS_Off& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Assassin_LS_Off)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Assassin_LS_Off::CopyFrom(const S_Assassin_LS_Off& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Assassin_LS_Off)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Assassin_LS_Off::IsInitialized() const {
  return true;
}

void S_Assassin_LS_Off::InternalSwap(S_Assassin_LS_Off* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Assassin_LS_Off::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[22]);
}

// ===================================================================

class C_Archor_Attack::_Internal {
 public:
};

C_Archor_Attack::C_Archor_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.C_Archor_Attack)
}
C_Archor_Attack::C_Archor_Attack(const C_Archor_Attack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
  // @@protoc_insertion_point(copy_constructor:skill.C_Archor_Attack)
}

inline void C_Archor_Attack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
}

C_Archor_Attack::~C_Archor_Attack() {
  // @@protoc_insertion_point(destructor:skill.C_Archor_Attack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Archor_Attack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Archor_Attack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Archor_Attack::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Archor_Attack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_z_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Archor_Attack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float start_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          start_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float start_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          start_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float start_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          start_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float end_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          end_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float end_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          end_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float end_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          end_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Archor_Attack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Archor_Attack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float start_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_x = this->_internal_start_x();
  uint32_t raw_start_x;
  memcpy(&raw_start_x, &tmp_start_x, sizeof(tmp_start_x));
  if (raw_start_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_start_x(), target);
  }

  // float start_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_y = this->_internal_start_y();
  uint32_t raw_start_y;
  memcpy(&raw_start_y, &tmp_start_y, sizeof(tmp_start_y));
  if (raw_start_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_start_y(), target);
  }

  // float start_z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_z = this->_internal_start_z();
  uint32_t raw_start_z;
  memcpy(&raw_start_z, &tmp_start_z, sizeof(tmp_start_z));
  if (raw_start_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_start_z(), target);
  }

  // float end_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_x = this->_internal_end_x();
  uint32_t raw_end_x;
  memcpy(&raw_end_x, &tmp_end_x, sizeof(tmp_end_x));
  if (raw_end_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_end_x(), target);
  }

  // float end_y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_y = this->_internal_end_y();
  uint32_t raw_end_y;
  memcpy(&raw_end_y, &tmp_end_y, sizeof(tmp_end_y));
  if (raw_end_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_end_y(), target);
  }

  // float end_z = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_z = this->_internal_end_z();
  uint32_t raw_end_z;
  memcpy(&raw_end_z, &tmp_end_z, sizeof(tmp_end_z));
  if (raw_end_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_end_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Archor_Attack)
  return target;
}

size_t C_Archor_Attack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Archor_Attack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float start_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_x = this->_internal_start_x();
  uint32_t raw_start_x;
  memcpy(&raw_start_x, &tmp_start_x, sizeof(tmp_start_x));
  if (raw_start_x != 0) {
    total_size += 1 + 4;
  }

  // float start_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_y = this->_internal_start_y();
  uint32_t raw_start_y;
  memcpy(&raw_start_y, &tmp_start_y, sizeof(tmp_start_y));
  if (raw_start_y != 0) {
    total_size += 1 + 4;
  }

  // float start_z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_z = this->_internal_start_z();
  uint32_t raw_start_z;
  memcpy(&raw_start_z, &tmp_start_z, sizeof(tmp_start_z));
  if (raw_start_z != 0) {
    total_size += 1 + 4;
  }

  // float end_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_x = this->_internal_end_x();
  uint32_t raw_end_x;
  memcpy(&raw_end_x, &tmp_end_x, sizeof(tmp_end_x));
  if (raw_end_x != 0) {
    total_size += 1 + 4;
  }

  // float end_y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_y = this->_internal_end_y();
  uint32_t raw_end_y;
  memcpy(&raw_end_y, &tmp_end_y, sizeof(tmp_end_y));
  if (raw_end_y != 0) {
    total_size += 1 + 4;
  }

  // float end_z = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_z = this->_internal_end_z();
  uint32_t raw_end_z;
  memcpy(&raw_end_z, &tmp_end_z, sizeof(tmp_end_z));
  if (raw_end_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Archor_Attack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Archor_Attack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Archor_Attack::GetClassData() const { return &_class_data_; }

void C_Archor_Attack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Archor_Attack *>(to)->MergeFrom(
      static_cast<const C_Archor_Attack &>(from));
}


void C_Archor_Attack::MergeFrom(const C_Archor_Attack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Archor_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_x = from._internal_start_x();
  uint32_t raw_start_x;
  memcpy(&raw_start_x, &tmp_start_x, sizeof(tmp_start_x));
  if (raw_start_x != 0) {
    _internal_set_start_x(from._internal_start_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_y = from._internal_start_y();
  uint32_t raw_start_y;
  memcpy(&raw_start_y, &tmp_start_y, sizeof(tmp_start_y));
  if (raw_start_y != 0) {
    _internal_set_start_y(from._internal_start_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_z = from._internal_start_z();
  uint32_t raw_start_z;
  memcpy(&raw_start_z, &tmp_start_z, sizeof(tmp_start_z));
  if (raw_start_z != 0) {
    _internal_set_start_z(from._internal_start_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_x = from._internal_end_x();
  uint32_t raw_end_x;
  memcpy(&raw_end_x, &tmp_end_x, sizeof(tmp_end_x));
  if (raw_end_x != 0) {
    _internal_set_end_x(from._internal_end_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_y = from._internal_end_y();
  uint32_t raw_end_y;
  memcpy(&raw_end_y, &tmp_end_y, sizeof(tmp_end_y));
  if (raw_end_y != 0) {
    _internal_set_end_y(from._internal_end_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_z = from._internal_end_z();
  uint32_t raw_end_z;
  memcpy(&raw_end_z, &tmp_end_z, sizeof(tmp_end_z));
  if (raw_end_z != 0) {
    _internal_set_end_z(from._internal_end_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Archor_Attack::CopyFrom(const C_Archor_Attack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Archor_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Archor_Attack::IsInitialized() const {
  return true;
}

void C_Archor_Attack::InternalSwap(C_Archor_Attack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Archor_Attack, end_z_)
      + sizeof(C_Archor_Attack::end_z_)
      - PROTOBUF_FIELD_OFFSET(C_Archor_Attack, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Archor_Attack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[23]);
}

// ===================================================================

class S_Archor_Attack::_Internal {
 public:
};

S_Archor_Attack::S_Archor_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_Archor_Attack)
}
S_Archor_Attack::S_Archor_Attack(const S_Archor_Attack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ls_mode_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(ls_mode_));
  // @@protoc_insertion_point(copy_constructor:skill.S_Archor_Attack)
}

inline void S_Archor_Attack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ls_mode_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(ls_mode_));
}

S_Archor_Attack::~S_Archor_Attack() {
  // @@protoc_insertion_point(destructor:skill.S_Archor_Attack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Archor_Attack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Archor_Attack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Archor_Attack::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Archor_Attack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ls_mode_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(ls_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Archor_Attack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float start_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          start_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float start_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          start_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float start_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          start_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float end_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          end_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float end_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          end_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float end_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          end_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 R_Mode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          r_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 LS_Mode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ls_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Archor_Attack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Archor_Attack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float start_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_x = this->_internal_start_x();
  uint32_t raw_start_x;
  memcpy(&raw_start_x, &tmp_start_x, sizeof(tmp_start_x));
  if (raw_start_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_start_x(), target);
  }

  // float start_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_y = this->_internal_start_y();
  uint32_t raw_start_y;
  memcpy(&raw_start_y, &tmp_start_y, sizeof(tmp_start_y));
  if (raw_start_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_start_y(), target);
  }

  // float start_z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_z = this->_internal_start_z();
  uint32_t raw_start_z;
  memcpy(&raw_start_z, &tmp_start_z, sizeof(tmp_start_z));
  if (raw_start_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_start_z(), target);
  }

  // float end_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_x = this->_internal_end_x();
  uint32_t raw_end_x;
  memcpy(&raw_end_x, &tmp_end_x, sizeof(tmp_end_x));
  if (raw_end_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_end_x(), target);
  }

  // float end_y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_y = this->_internal_end_y();
  uint32_t raw_end_y;
  memcpy(&raw_end_y, &tmp_end_y, sizeof(tmp_end_y));
  if (raw_end_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_end_y(), target);
  }

  // float end_z = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_z = this->_internal_end_z();
  uint32_t raw_end_z;
  memcpy(&raw_end_z, &tmp_end_z, sizeof(tmp_end_z));
  if (raw_end_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_end_z(), target);
  }

  // int32 R_Mode = 8;
  if (this->_internal_r_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_r_mode(), target);
  }

  // int32 LS_Mode = 9;
  if (this->_internal_ls_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_ls_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Archor_Attack)
  return target;
}

size_t S_Archor_Attack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Archor_Attack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float start_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_x = this->_internal_start_x();
  uint32_t raw_start_x;
  memcpy(&raw_start_x, &tmp_start_x, sizeof(tmp_start_x));
  if (raw_start_x != 0) {
    total_size += 1 + 4;
  }

  // float start_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_y = this->_internal_start_y();
  uint32_t raw_start_y;
  memcpy(&raw_start_y, &tmp_start_y, sizeof(tmp_start_y));
  if (raw_start_y != 0) {
    total_size += 1 + 4;
  }

  // float start_z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_z = this->_internal_start_z();
  uint32_t raw_start_z;
  memcpy(&raw_start_z, &tmp_start_z, sizeof(tmp_start_z));
  if (raw_start_z != 0) {
    total_size += 1 + 4;
  }

  // float end_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_x = this->_internal_end_x();
  uint32_t raw_end_x;
  memcpy(&raw_end_x, &tmp_end_x, sizeof(tmp_end_x));
  if (raw_end_x != 0) {
    total_size += 1 + 4;
  }

  // float end_y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_y = this->_internal_end_y();
  uint32_t raw_end_y;
  memcpy(&raw_end_y, &tmp_end_y, sizeof(tmp_end_y));
  if (raw_end_y != 0) {
    total_size += 1 + 4;
  }

  // float end_z = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_z = this->_internal_end_z();
  uint32_t raw_end_z;
  memcpy(&raw_end_z, &tmp_end_z, sizeof(tmp_end_z));
  if (raw_end_z != 0) {
    total_size += 1 + 4;
  }

  // int32 R_Mode = 8;
  if (this->_internal_r_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_r_mode());
  }

  // int32 LS_Mode = 9;
  if (this->_internal_ls_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ls_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Archor_Attack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Archor_Attack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Archor_Attack::GetClassData() const { return &_class_data_; }

void S_Archor_Attack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Archor_Attack *>(to)->MergeFrom(
      static_cast<const S_Archor_Attack &>(from));
}


void S_Archor_Attack::MergeFrom(const S_Archor_Attack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Archor_Attack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_x = from._internal_start_x();
  uint32_t raw_start_x;
  memcpy(&raw_start_x, &tmp_start_x, sizeof(tmp_start_x));
  if (raw_start_x != 0) {
    _internal_set_start_x(from._internal_start_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_y = from._internal_start_y();
  uint32_t raw_start_y;
  memcpy(&raw_start_y, &tmp_start_y, sizeof(tmp_start_y));
  if (raw_start_y != 0) {
    _internal_set_start_y(from._internal_start_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_z = from._internal_start_z();
  uint32_t raw_start_z;
  memcpy(&raw_start_z, &tmp_start_z, sizeof(tmp_start_z));
  if (raw_start_z != 0) {
    _internal_set_start_z(from._internal_start_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_x = from._internal_end_x();
  uint32_t raw_end_x;
  memcpy(&raw_end_x, &tmp_end_x, sizeof(tmp_end_x));
  if (raw_end_x != 0) {
    _internal_set_end_x(from._internal_end_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_y = from._internal_end_y();
  uint32_t raw_end_y;
  memcpy(&raw_end_y, &tmp_end_y, sizeof(tmp_end_y));
  if (raw_end_y != 0) {
    _internal_set_end_y(from._internal_end_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_z = from._internal_end_z();
  uint32_t raw_end_z;
  memcpy(&raw_end_z, &tmp_end_z, sizeof(tmp_end_z));
  if (raw_end_z != 0) {
    _internal_set_end_z(from._internal_end_z());
  }
  if (from._internal_r_mode() != 0) {
    _internal_set_r_mode(from._internal_r_mode());
  }
  if (from._internal_ls_mode() != 0) {
    _internal_set_ls_mode(from._internal_ls_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Archor_Attack::CopyFrom(const S_Archor_Attack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Archor_Attack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Archor_Attack::IsInitialized() const {
  return true;
}

void S_Archor_Attack::InternalSwap(S_Archor_Attack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Archor_Attack, ls_mode_)
      + sizeof(S_Archor_Attack::ls_mode_)
      - PROTOBUF_FIELD_OFFSET(S_Archor_Attack, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Archor_Attack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[24]);
}

// ===================================================================

class C_Archor_Q_Charging::_Internal {
 public:
};

C_Archor_Q_Charging::C_Archor_Q_Charging(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.C_Archor_Q_Charging)
}
C_Archor_Q_Charging::C_Archor_Q_Charging(const C_Archor_Q_Charging& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_Archor_Q_Charging)
}

inline void C_Archor_Q_Charging::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_Archor_Q_Charging::~C_Archor_Q_Charging() {
  // @@protoc_insertion_point(destructor:skill.C_Archor_Q_Charging)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Archor_Q_Charging::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Archor_Q_Charging::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Archor_Q_Charging::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Archor_Q_Charging)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Archor_Q_Charging::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Archor_Q_Charging::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Archor_Q_Charging)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Archor_Q_Charging)
  return target;
}

size_t C_Archor_Q_Charging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Archor_Q_Charging)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Archor_Q_Charging::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Archor_Q_Charging::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Archor_Q_Charging::GetClassData() const { return &_class_data_; }

void C_Archor_Q_Charging::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Archor_Q_Charging *>(to)->MergeFrom(
      static_cast<const C_Archor_Q_Charging &>(from));
}


void C_Archor_Q_Charging::MergeFrom(const C_Archor_Q_Charging& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Archor_Q_Charging)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Archor_Q_Charging::CopyFrom(const C_Archor_Q_Charging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Archor_Q_Charging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Archor_Q_Charging::IsInitialized() const {
  return true;
}

void C_Archor_Q_Charging::InternalSwap(C_Archor_Q_Charging* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Archor_Q_Charging::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[25]);
}

// ===================================================================

class S_Archor_Q_Charging::_Internal {
 public:
};

S_Archor_Q_Charging::S_Archor_Q_Charging(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_Archor_Q_Charging)
}
S_Archor_Q_Charging::S_Archor_Q_Charging(const S_Archor_Q_Charging& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_mode_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(r_mode_));
  // @@protoc_insertion_point(copy_constructor:skill.S_Archor_Q_Charging)
}

inline void S_Archor_Q_Charging::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&r_mode_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(r_mode_));
}

S_Archor_Q_Charging::~S_Archor_Q_Charging() {
  // @@protoc_insertion_point(destructor:skill.S_Archor_Q_Charging)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Archor_Q_Charging::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Archor_Q_Charging::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Archor_Q_Charging::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Archor_Q_Charging)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_mode_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(r_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Archor_Q_Charging::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 R_Mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          r_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Archor_Q_Charging::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Archor_Q_Charging)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // int32 R_Mode = 2;
  if (this->_internal_r_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_r_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Archor_Q_Charging)
  return target;
}

size_t S_Archor_Q_Charging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Archor_Q_Charging)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // int32 R_Mode = 2;
  if (this->_internal_r_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_r_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Archor_Q_Charging::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Archor_Q_Charging::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Archor_Q_Charging::GetClassData() const { return &_class_data_; }

void S_Archor_Q_Charging::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Archor_Q_Charging *>(to)->MergeFrom(
      static_cast<const S_Archor_Q_Charging &>(from));
}


void S_Archor_Q_Charging::MergeFrom(const S_Archor_Q_Charging& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Archor_Q_Charging)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_r_mode() != 0) {
    _internal_set_r_mode(from._internal_r_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Archor_Q_Charging::CopyFrom(const S_Archor_Q_Charging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Archor_Q_Charging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Archor_Q_Charging::IsInitialized() const {
  return true;
}

void S_Archor_Q_Charging::InternalSwap(S_Archor_Q_Charging* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Archor_Q_Charging, r_mode_)
      + sizeof(S_Archor_Q_Charging::r_mode_)
      - PROTOBUF_FIELD_OFFSET(S_Archor_Q_Charging, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Archor_Q_Charging::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[26]);
}

// ===================================================================

class C_Archor_Q_Shot::_Internal {
 public:
};

C_Archor_Q_Shot::C_Archor_Q_Shot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.C_Archor_Q_Shot)
}
C_Archor_Q_Shot::C_Archor_Q_Shot(const C_Archor_Q_Shot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
  // @@protoc_insertion_point(copy_constructor:skill.C_Archor_Q_Shot)
}

inline void C_Archor_Q_Shot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
}

C_Archor_Q_Shot::~C_Archor_Q_Shot() {
  // @@protoc_insertion_point(destructor:skill.C_Archor_Q_Shot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Archor_Q_Shot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Archor_Q_Shot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Archor_Q_Shot::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Archor_Q_Shot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_z_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Archor_Q_Shot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float start_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          start_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float start_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          start_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float start_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          start_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float end_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          end_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float end_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          end_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float end_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          end_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Archor_Q_Shot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Archor_Q_Shot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float start_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_x = this->_internal_start_x();
  uint32_t raw_start_x;
  memcpy(&raw_start_x, &tmp_start_x, sizeof(tmp_start_x));
  if (raw_start_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_start_x(), target);
  }

  // float start_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_y = this->_internal_start_y();
  uint32_t raw_start_y;
  memcpy(&raw_start_y, &tmp_start_y, sizeof(tmp_start_y));
  if (raw_start_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_start_y(), target);
  }

  // float start_z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_z = this->_internal_start_z();
  uint32_t raw_start_z;
  memcpy(&raw_start_z, &tmp_start_z, sizeof(tmp_start_z));
  if (raw_start_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_start_z(), target);
  }

  // float end_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_x = this->_internal_end_x();
  uint32_t raw_end_x;
  memcpy(&raw_end_x, &tmp_end_x, sizeof(tmp_end_x));
  if (raw_end_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_end_x(), target);
  }

  // float end_y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_y = this->_internal_end_y();
  uint32_t raw_end_y;
  memcpy(&raw_end_y, &tmp_end_y, sizeof(tmp_end_y));
  if (raw_end_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_end_y(), target);
  }

  // float end_z = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_z = this->_internal_end_z();
  uint32_t raw_end_z;
  memcpy(&raw_end_z, &tmp_end_z, sizeof(tmp_end_z));
  if (raw_end_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_end_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Archor_Q_Shot)
  return target;
}

size_t C_Archor_Q_Shot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Archor_Q_Shot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float start_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_x = this->_internal_start_x();
  uint32_t raw_start_x;
  memcpy(&raw_start_x, &tmp_start_x, sizeof(tmp_start_x));
  if (raw_start_x != 0) {
    total_size += 1 + 4;
  }

  // float start_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_y = this->_internal_start_y();
  uint32_t raw_start_y;
  memcpy(&raw_start_y, &tmp_start_y, sizeof(tmp_start_y));
  if (raw_start_y != 0) {
    total_size += 1 + 4;
  }

  // float start_z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_z = this->_internal_start_z();
  uint32_t raw_start_z;
  memcpy(&raw_start_z, &tmp_start_z, sizeof(tmp_start_z));
  if (raw_start_z != 0) {
    total_size += 1 + 4;
  }

  // float end_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_x = this->_internal_end_x();
  uint32_t raw_end_x;
  memcpy(&raw_end_x, &tmp_end_x, sizeof(tmp_end_x));
  if (raw_end_x != 0) {
    total_size += 1 + 4;
  }

  // float end_y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_y = this->_internal_end_y();
  uint32_t raw_end_y;
  memcpy(&raw_end_y, &tmp_end_y, sizeof(tmp_end_y));
  if (raw_end_y != 0) {
    total_size += 1 + 4;
  }

  // float end_z = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_z = this->_internal_end_z();
  uint32_t raw_end_z;
  memcpy(&raw_end_z, &tmp_end_z, sizeof(tmp_end_z));
  if (raw_end_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Archor_Q_Shot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Archor_Q_Shot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Archor_Q_Shot::GetClassData() const { return &_class_data_; }

void C_Archor_Q_Shot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Archor_Q_Shot *>(to)->MergeFrom(
      static_cast<const C_Archor_Q_Shot &>(from));
}


void C_Archor_Q_Shot::MergeFrom(const C_Archor_Q_Shot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Archor_Q_Shot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_x = from._internal_start_x();
  uint32_t raw_start_x;
  memcpy(&raw_start_x, &tmp_start_x, sizeof(tmp_start_x));
  if (raw_start_x != 0) {
    _internal_set_start_x(from._internal_start_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_y = from._internal_start_y();
  uint32_t raw_start_y;
  memcpy(&raw_start_y, &tmp_start_y, sizeof(tmp_start_y));
  if (raw_start_y != 0) {
    _internal_set_start_y(from._internal_start_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_z = from._internal_start_z();
  uint32_t raw_start_z;
  memcpy(&raw_start_z, &tmp_start_z, sizeof(tmp_start_z));
  if (raw_start_z != 0) {
    _internal_set_start_z(from._internal_start_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_x = from._internal_end_x();
  uint32_t raw_end_x;
  memcpy(&raw_end_x, &tmp_end_x, sizeof(tmp_end_x));
  if (raw_end_x != 0) {
    _internal_set_end_x(from._internal_end_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_y = from._internal_end_y();
  uint32_t raw_end_y;
  memcpy(&raw_end_y, &tmp_end_y, sizeof(tmp_end_y));
  if (raw_end_y != 0) {
    _internal_set_end_y(from._internal_end_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_z = from._internal_end_z();
  uint32_t raw_end_z;
  memcpy(&raw_end_z, &tmp_end_z, sizeof(tmp_end_z));
  if (raw_end_z != 0) {
    _internal_set_end_z(from._internal_end_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Archor_Q_Shot::CopyFrom(const C_Archor_Q_Shot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Archor_Q_Shot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Archor_Q_Shot::IsInitialized() const {
  return true;
}

void C_Archor_Q_Shot::InternalSwap(C_Archor_Q_Shot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Archor_Q_Shot, end_z_)
      + sizeof(C_Archor_Q_Shot::end_z_)
      - PROTOBUF_FIELD_OFFSET(C_Archor_Q_Shot, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Archor_Q_Shot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[27]);
}

// ===================================================================

class S_Archor_Q_Shot::_Internal {
 public:
};

S_Archor_Q_Shot::S_Archor_Q_Shot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_Archor_Q_Shot)
}
S_Archor_Q_Shot::S_Archor_Q_Shot(const S_Archor_Q_Shot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
  // @@protoc_insertion_point(copy_constructor:skill.S_Archor_Q_Shot)
}

inline void S_Archor_Q_Shot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
}

S_Archor_Q_Shot::~S_Archor_Q_Shot() {
  // @@protoc_insertion_point(destructor:skill.S_Archor_Q_Shot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Archor_Q_Shot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Archor_Q_Shot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Archor_Q_Shot::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Archor_Q_Shot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_z_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(end_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Archor_Q_Shot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float start_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          start_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float start_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          start_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float start_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          start_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float end_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          end_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float end_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          end_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float end_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          end_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Archor_Q_Shot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Archor_Q_Shot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float start_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_x = this->_internal_start_x();
  uint32_t raw_start_x;
  memcpy(&raw_start_x, &tmp_start_x, sizeof(tmp_start_x));
  if (raw_start_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_start_x(), target);
  }

  // float start_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_y = this->_internal_start_y();
  uint32_t raw_start_y;
  memcpy(&raw_start_y, &tmp_start_y, sizeof(tmp_start_y));
  if (raw_start_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_start_y(), target);
  }

  // float start_z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_z = this->_internal_start_z();
  uint32_t raw_start_z;
  memcpy(&raw_start_z, &tmp_start_z, sizeof(tmp_start_z));
  if (raw_start_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_start_z(), target);
  }

  // float end_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_x = this->_internal_end_x();
  uint32_t raw_end_x;
  memcpy(&raw_end_x, &tmp_end_x, sizeof(tmp_end_x));
  if (raw_end_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_end_x(), target);
  }

  // float end_y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_y = this->_internal_end_y();
  uint32_t raw_end_y;
  memcpy(&raw_end_y, &tmp_end_y, sizeof(tmp_end_y));
  if (raw_end_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_end_y(), target);
  }

  // float end_z = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_z = this->_internal_end_z();
  uint32_t raw_end_z;
  memcpy(&raw_end_z, &tmp_end_z, sizeof(tmp_end_z));
  if (raw_end_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_end_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Archor_Q_Shot)
  return target;
}

size_t S_Archor_Q_Shot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Archor_Q_Shot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float start_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_x = this->_internal_start_x();
  uint32_t raw_start_x;
  memcpy(&raw_start_x, &tmp_start_x, sizeof(tmp_start_x));
  if (raw_start_x != 0) {
    total_size += 1 + 4;
  }

  // float start_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_y = this->_internal_start_y();
  uint32_t raw_start_y;
  memcpy(&raw_start_y, &tmp_start_y, sizeof(tmp_start_y));
  if (raw_start_y != 0) {
    total_size += 1 + 4;
  }

  // float start_z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_z = this->_internal_start_z();
  uint32_t raw_start_z;
  memcpy(&raw_start_z, &tmp_start_z, sizeof(tmp_start_z));
  if (raw_start_z != 0) {
    total_size += 1 + 4;
  }

  // float end_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_x = this->_internal_end_x();
  uint32_t raw_end_x;
  memcpy(&raw_end_x, &tmp_end_x, sizeof(tmp_end_x));
  if (raw_end_x != 0) {
    total_size += 1 + 4;
  }

  // float end_y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_y = this->_internal_end_y();
  uint32_t raw_end_y;
  memcpy(&raw_end_y, &tmp_end_y, sizeof(tmp_end_y));
  if (raw_end_y != 0) {
    total_size += 1 + 4;
  }

  // float end_z = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_z = this->_internal_end_z();
  uint32_t raw_end_z;
  memcpy(&raw_end_z, &tmp_end_z, sizeof(tmp_end_z));
  if (raw_end_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Archor_Q_Shot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Archor_Q_Shot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Archor_Q_Shot::GetClassData() const { return &_class_data_; }

void S_Archor_Q_Shot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Archor_Q_Shot *>(to)->MergeFrom(
      static_cast<const S_Archor_Q_Shot &>(from));
}


void S_Archor_Q_Shot::MergeFrom(const S_Archor_Q_Shot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Archor_Q_Shot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_x = from._internal_start_x();
  uint32_t raw_start_x;
  memcpy(&raw_start_x, &tmp_start_x, sizeof(tmp_start_x));
  if (raw_start_x != 0) {
    _internal_set_start_x(from._internal_start_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_y = from._internal_start_y();
  uint32_t raw_start_y;
  memcpy(&raw_start_y, &tmp_start_y, sizeof(tmp_start_y));
  if (raw_start_y != 0) {
    _internal_set_start_y(from._internal_start_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_start_z = from._internal_start_z();
  uint32_t raw_start_z;
  memcpy(&raw_start_z, &tmp_start_z, sizeof(tmp_start_z));
  if (raw_start_z != 0) {
    _internal_set_start_z(from._internal_start_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_x = from._internal_end_x();
  uint32_t raw_end_x;
  memcpy(&raw_end_x, &tmp_end_x, sizeof(tmp_end_x));
  if (raw_end_x != 0) {
    _internal_set_end_x(from._internal_end_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_y = from._internal_end_y();
  uint32_t raw_end_y;
  memcpy(&raw_end_y, &tmp_end_y, sizeof(tmp_end_y));
  if (raw_end_y != 0) {
    _internal_set_end_y(from._internal_end_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_end_z = from._internal_end_z();
  uint32_t raw_end_z;
  memcpy(&raw_end_z, &tmp_end_z, sizeof(tmp_end_z));
  if (raw_end_z != 0) {
    _internal_set_end_z(from._internal_end_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Archor_Q_Shot::CopyFrom(const S_Archor_Q_Shot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Archor_Q_Shot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Archor_Q_Shot::IsInitialized() const {
  return true;
}

void S_Archor_Q_Shot::InternalSwap(S_Archor_Q_Shot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Archor_Q_Shot, end_z_)
      + sizeof(S_Archor_Q_Shot::end_z_)
      - PROTOBUF_FIELD_OFFSET(S_Archor_Q_Shot, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Archor_Q_Shot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[28]);
}

// ===================================================================

class C_Archor_E::_Internal {
 public:
};

C_Archor_E::C_Archor_E(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.C_Archor_E)
}
C_Archor_E::C_Archor_E(const C_Archor_E& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:skill.C_Archor_E)
}

inline void C_Archor_E::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
}

C_Archor_E::~C_Archor_E() {
  // @@protoc_insertion_point(destructor:skill.C_Archor_E)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Archor_E::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Archor_E::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Archor_E::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Archor_E)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Archor_E::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Archor_E::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Archor_E)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Archor_E)
  return target;
}

size_t C_Archor_E::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Archor_E)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Archor_E::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Archor_E::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Archor_E::GetClassData() const { return &_class_data_; }

void C_Archor_E::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Archor_E *>(to)->MergeFrom(
      static_cast<const C_Archor_E &>(from));
}


void C_Archor_E::MergeFrom(const C_Archor_E& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Archor_E)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Archor_E::CopyFrom(const C_Archor_E& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Archor_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Archor_E::IsInitialized() const {
  return true;
}

void C_Archor_E::InternalSwap(C_Archor_E* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_Archor_E, z_)
      + sizeof(C_Archor_E::z_)
      - PROTOBUF_FIELD_OFFSET(C_Archor_E, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Archor_E::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[29]);
}

// ===================================================================

class S_Archor_E::_Internal {
 public:
};

S_Archor_E::S_Archor_E(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_Archor_E)
}
S_Archor_E::S_Archor_E(const S_Archor_E& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:skill.S_Archor_E)
}

inline void S_Archor_E::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
}

S_Archor_E::~S_Archor_E() {
  // @@protoc_insertion_point(destructor:skill.S_Archor_E)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Archor_E::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Archor_E::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Archor_E::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Archor_E)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Archor_E::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Archor_E::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Archor_E)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Archor_E)
  return target;
}

size_t S_Archor_E::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Archor_E)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Archor_E::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Archor_E::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Archor_E::GetClassData() const { return &_class_data_; }

void S_Archor_E::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Archor_E *>(to)->MergeFrom(
      static_cast<const S_Archor_E &>(from));
}


void S_Archor_E::MergeFrom(const S_Archor_E& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Archor_E)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Archor_E::CopyFrom(const S_Archor_E& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Archor_E)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Archor_E::IsInitialized() const {
  return true;
}

void S_Archor_E::InternalSwap(S_Archor_E* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_Archor_E, z_)
      + sizeof(S_Archor_E::z_)
      - PROTOBUF_FIELD_OFFSET(S_Archor_E, object_id_)>(
          reinterpret_cast<char*>(&object_id_),
          reinterpret_cast<char*>(&other->object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Archor_E::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[30]);
}

// ===================================================================

class C_Archor_R::_Internal {
 public:
};

C_Archor_R::C_Archor_R(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.C_Archor_R)
}
C_Archor_R::C_Archor_R(const C_Archor_R& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_Archor_R)
}

inline void C_Archor_R::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_Archor_R::~C_Archor_R() {
  // @@protoc_insertion_point(destructor:skill.C_Archor_R)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Archor_R::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Archor_R::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Archor_R::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Archor_R)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Archor_R::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Archor_R::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Archor_R)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Archor_R)
  return target;
}

size_t C_Archor_R::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Archor_R)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Archor_R::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Archor_R::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Archor_R::GetClassData() const { return &_class_data_; }

void C_Archor_R::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Archor_R *>(to)->MergeFrom(
      static_cast<const C_Archor_R &>(from));
}


void C_Archor_R::MergeFrom(const C_Archor_R& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Archor_R)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Archor_R::CopyFrom(const C_Archor_R& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Archor_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Archor_R::IsInitialized() const {
  return true;
}

void C_Archor_R::InternalSwap(C_Archor_R* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Archor_R::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[31]);
}

// ===================================================================

class S_Archor_R::_Internal {
 public:
};

S_Archor_R::S_Archor_R(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_Archor_R)
}
S_Archor_R::S_Archor_R(const S_Archor_R& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_Archor_R)
}

inline void S_Archor_R::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Archor_R::~S_Archor_R() {
  // @@protoc_insertion_point(destructor:skill.S_Archor_R)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Archor_R::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Archor_R::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Archor_R::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Archor_R)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Archor_R::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Archor_R::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Archor_R)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Archor_R)
  return target;
}

size_t S_Archor_R::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Archor_R)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Archor_R::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Archor_R::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Archor_R::GetClassData() const { return &_class_data_; }

void S_Archor_R::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Archor_R *>(to)->MergeFrom(
      static_cast<const S_Archor_R &>(from));
}


void S_Archor_R::MergeFrom(const S_Archor_R& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Archor_R)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Archor_R::CopyFrom(const S_Archor_R& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Archor_R)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Archor_R::IsInitialized() const {
  return true;
}

void S_Archor_R::InternalSwap(S_Archor_R* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Archor_R::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[32]);
}

// ===================================================================

class C_Archor_LS::_Internal {
 public:
};

C_Archor_LS::C_Archor_LS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.C_Archor_LS)
}
C_Archor_LS::C_Archor_LS(const C_Archor_LS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.C_Archor_LS)
}

inline void C_Archor_LS::SharedCtor() {
object_id_ = uint64_t{0u};
}

C_Archor_LS::~C_Archor_LS() {
  // @@protoc_insertion_point(destructor:skill.C_Archor_LS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_Archor_LS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_Archor_LS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C_Archor_LS::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.C_Archor_LS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_Archor_LS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_Archor_LS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.C_Archor_LS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.C_Archor_LS)
  return target;
}

size_t C_Archor_LS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.C_Archor_LS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_Archor_LS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C_Archor_LS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_Archor_LS::GetClassData() const { return &_class_data_; }

void C_Archor_LS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C_Archor_LS *>(to)->MergeFrom(
      static_cast<const C_Archor_LS &>(from));
}


void C_Archor_LS::MergeFrom(const C_Archor_LS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.C_Archor_LS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_Archor_LS::CopyFrom(const C_Archor_LS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.C_Archor_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_Archor_LS::IsInitialized() const {
  return true;
}

void C_Archor_LS::InternalSwap(C_Archor_LS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_Archor_LS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[33]);
}

// ===================================================================

class S_Archor_LS::_Internal {
 public:
};

S_Archor_LS::S_Archor_LS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:skill.S_Archor_LS)
}
S_Archor_LS::S_Archor_LS(const S_Archor_LS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  object_id_ = from.object_id_;
  // @@protoc_insertion_point(copy_constructor:skill.S_Archor_LS)
}

inline void S_Archor_LS::SharedCtor() {
object_id_ = uint64_t{0u};
}

S_Archor_LS::~S_Archor_LS() {
  // @@protoc_insertion_point(destructor:skill.S_Archor_LS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_Archor_LS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_Archor_LS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void S_Archor_LS::Clear() {
// @@protoc_insertion_point(message_clear_start:skill.S_Archor_LS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_Archor_LS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_Archor_LS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:skill.S_Archor_LS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:skill.S_Archor_LS)
  return target;
}

size_t S_Archor_LS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:skill.S_Archor_LS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_Archor_LS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    S_Archor_LS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_Archor_LS::GetClassData() const { return &_class_data_; }

void S_Archor_LS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<S_Archor_LS *>(to)->MergeFrom(
      static_cast<const S_Archor_LS &>(from));
}


void S_Archor_LS::MergeFrom(const S_Archor_LS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:skill.S_Archor_LS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_Archor_LS::CopyFrom(const S_Archor_LS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:skill.S_Archor_LS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_Archor_LS::IsInitialized() const {
  return true;
}

void S_Archor_LS::InternalSwap(S_Archor_LS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_Archor_LS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Skill_2eproto_getter, &descriptor_table_Skill_2eproto_once,
      file_level_metadata_Skill_2eproto[34]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace skill
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::skill::S_CoolTime*
Arena::CreateMaybeMessage< ::skill::S_CoolTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_CoolTime >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Warrior_Attack*
Arena::CreateMaybeMessage< ::skill::C_Warrior_Attack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Warrior_Attack >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Warrior_Attack*
Arena::CreateMaybeMessage< ::skill::S_Warrior_Attack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Warrior_Attack >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Warrior_Q*
Arena::CreateMaybeMessage< ::skill::C_Warrior_Q >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Warrior_Q >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Warrior_Q*
Arena::CreateMaybeMessage< ::skill::S_Warrior_Q >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Warrior_Q >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Warrior_E*
Arena::CreateMaybeMessage< ::skill::C_Warrior_E >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Warrior_E >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Warrior_E*
Arena::CreateMaybeMessage< ::skill::S_Warrior_E >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Warrior_E >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Warrior_R*
Arena::CreateMaybeMessage< ::skill::C_Warrior_R >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Warrior_R >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Warrior_R*
Arena::CreateMaybeMessage< ::skill::S_Warrior_R >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Warrior_R >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Warrior_LS*
Arena::CreateMaybeMessage< ::skill::C_Warrior_LS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Warrior_LS >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Warrior_LS*
Arena::CreateMaybeMessage< ::skill::S_Warrior_LS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Warrior_LS >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_ASSASSIN_Attack*
Arena::CreateMaybeMessage< ::skill::C_ASSASSIN_Attack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_ASSASSIN_Attack >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_ASSASSIN_Attack*
Arena::CreateMaybeMessage< ::skill::S_ASSASSIN_Attack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_ASSASSIN_Attack >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_ASSASSIN_Q*
Arena::CreateMaybeMessage< ::skill::C_ASSASSIN_Q >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_ASSASSIN_Q >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_ASSASSIN_Q*
Arena::CreateMaybeMessage< ::skill::S_ASSASSIN_Q >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_ASSASSIN_Q >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Assassin_E*
Arena::CreateMaybeMessage< ::skill::C_Assassin_E >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Assassin_E >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Assassin_E*
Arena::CreateMaybeMessage< ::skill::S_Assassin_E >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Assassin_E >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_ASSASSIN_R*
Arena::CreateMaybeMessage< ::skill::C_ASSASSIN_R >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_ASSASSIN_R >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_ASSASSIN_R*
Arena::CreateMaybeMessage< ::skill::S_ASSASSIN_R >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_ASSASSIN_R >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_ASSASSIN_LS*
Arena::CreateMaybeMessage< ::skill::C_ASSASSIN_LS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_ASSASSIN_LS >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_ASSASSIN_LS*
Arena::CreateMaybeMessage< ::skill::S_ASSASSIN_LS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_ASSASSIN_LS >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Assassin_LS_Off*
Arena::CreateMaybeMessage< ::skill::C_Assassin_LS_Off >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Assassin_LS_Off >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Assassin_LS_Off*
Arena::CreateMaybeMessage< ::skill::S_Assassin_LS_Off >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Assassin_LS_Off >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Archor_Attack*
Arena::CreateMaybeMessage< ::skill::C_Archor_Attack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Archor_Attack >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Archor_Attack*
Arena::CreateMaybeMessage< ::skill::S_Archor_Attack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Archor_Attack >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Archor_Q_Charging*
Arena::CreateMaybeMessage< ::skill::C_Archor_Q_Charging >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Archor_Q_Charging >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Archor_Q_Charging*
Arena::CreateMaybeMessage< ::skill::S_Archor_Q_Charging >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Archor_Q_Charging >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Archor_Q_Shot*
Arena::CreateMaybeMessage< ::skill::C_Archor_Q_Shot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Archor_Q_Shot >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Archor_Q_Shot*
Arena::CreateMaybeMessage< ::skill::S_Archor_Q_Shot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Archor_Q_Shot >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Archor_E*
Arena::CreateMaybeMessage< ::skill::C_Archor_E >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Archor_E >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Archor_E*
Arena::CreateMaybeMessage< ::skill::S_Archor_E >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Archor_E >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Archor_R*
Arena::CreateMaybeMessage< ::skill::C_Archor_R >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Archor_R >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Archor_R*
Arena::CreateMaybeMessage< ::skill::S_Archor_R >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Archor_R >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::C_Archor_LS*
Arena::CreateMaybeMessage< ::skill::C_Archor_LS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::C_Archor_LS >(arena);
}
template<> PROTOBUF_NOINLINE ::skill::S_Archor_LS*
Arena::CreateMaybeMessage< ::skill::S_Archor_LS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::skill::S_Archor_LS >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
