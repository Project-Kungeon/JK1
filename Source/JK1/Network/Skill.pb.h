// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Skill.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Skill_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Skill_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Skill_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Skill_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Skill_2eproto;
namespace skill {
class C_Warrior_Attack;
struct C_Warrior_AttackDefaultTypeInternal;
extern C_Warrior_AttackDefaultTypeInternal _C_Warrior_Attack_default_instance_;
class C_Warrior_E;
struct C_Warrior_EDefaultTypeInternal;
extern C_Warrior_EDefaultTypeInternal _C_Warrior_E_default_instance_;
class C_Warrior_LS;
struct C_Warrior_LSDefaultTypeInternal;
extern C_Warrior_LSDefaultTypeInternal _C_Warrior_LS_default_instance_;
class C_Warrior_Q;
struct C_Warrior_QDefaultTypeInternal;
extern C_Warrior_QDefaultTypeInternal _C_Warrior_Q_default_instance_;
class C_Warrior_R;
struct C_Warrior_RDefaultTypeInternal;
extern C_Warrior_RDefaultTypeInternal _C_Warrior_R_default_instance_;
class S_CoolTime;
struct S_CoolTimeDefaultTypeInternal;
extern S_CoolTimeDefaultTypeInternal _S_CoolTime_default_instance_;
class S_Warrior_Attack;
struct S_Warrior_AttackDefaultTypeInternal;
extern S_Warrior_AttackDefaultTypeInternal _S_Warrior_Attack_default_instance_;
class S_Warrior_E;
struct S_Warrior_EDefaultTypeInternal;
extern S_Warrior_EDefaultTypeInternal _S_Warrior_E_default_instance_;
class S_Warrior_LS;
struct S_Warrior_LSDefaultTypeInternal;
extern S_Warrior_LSDefaultTypeInternal _S_Warrior_LS_default_instance_;
class S_Warrior_Q;
struct S_Warrior_QDefaultTypeInternal;
extern S_Warrior_QDefaultTypeInternal _S_Warrior_Q_default_instance_;
class S_Warrior_R;
struct S_Warrior_RDefaultTypeInternal;
extern S_Warrior_RDefaultTypeInternal _S_Warrior_R_default_instance_;
}  // namespace skill
PROTOBUF_NAMESPACE_OPEN
template<> ::skill::C_Warrior_Attack* Arena::CreateMaybeMessage<::skill::C_Warrior_Attack>(Arena*);
template<> ::skill::C_Warrior_E* Arena::CreateMaybeMessage<::skill::C_Warrior_E>(Arena*);
template<> ::skill::C_Warrior_LS* Arena::CreateMaybeMessage<::skill::C_Warrior_LS>(Arena*);
template<> ::skill::C_Warrior_Q* Arena::CreateMaybeMessage<::skill::C_Warrior_Q>(Arena*);
template<> ::skill::C_Warrior_R* Arena::CreateMaybeMessage<::skill::C_Warrior_R>(Arena*);
template<> ::skill::S_CoolTime* Arena::CreateMaybeMessage<::skill::S_CoolTime>(Arena*);
template<> ::skill::S_Warrior_Attack* Arena::CreateMaybeMessage<::skill::S_Warrior_Attack>(Arena*);
template<> ::skill::S_Warrior_E* Arena::CreateMaybeMessage<::skill::S_Warrior_E>(Arena*);
template<> ::skill::S_Warrior_LS* Arena::CreateMaybeMessage<::skill::S_Warrior_LS>(Arena*);
template<> ::skill::S_Warrior_Q* Arena::CreateMaybeMessage<::skill::S_Warrior_Q>(Arena*);
template<> ::skill::S_Warrior_R* Arena::CreateMaybeMessage<::skill::S_Warrior_R>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace skill {

enum SKILLTYPE : int {
  NONE = 0,
  Q = 1,
  E = 2,
  R = 3,
  LS = 4,
  SKILLTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SKILLTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SKILLTYPE_IsValid(int value);
constexpr SKILLTYPE SKILLTYPE_MIN = NONE;
constexpr SKILLTYPE SKILLTYPE_MAX = LS;
constexpr int SKILLTYPE_ARRAYSIZE = SKILLTYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SKILLTYPE_descriptor();
template<typename T>
inline const std::string& SKILLTYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SKILLTYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SKILLTYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SKILLTYPE_descriptor(), enum_t_value);
}
inline bool SKILLTYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SKILLTYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SKILLTYPE>(
    SKILLTYPE_descriptor(), name, value);
}
// ===================================================================

class S_CoolTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skill.S_CoolTime) */ {
 public:
  inline S_CoolTime() : S_CoolTime(nullptr) {}
  ~S_CoolTime() override;
  explicit PROTOBUF_CONSTEXPR S_CoolTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CoolTime(const S_CoolTime& from);
  S_CoolTime(S_CoolTime&& from) noexcept
    : S_CoolTime() {
    *this = ::std::move(from);
  }

  inline S_CoolTime& operator=(const S_CoolTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CoolTime& operator=(S_CoolTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CoolTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CoolTime* internal_default_instance() {
    return reinterpret_cast<const S_CoolTime*>(
               &_S_CoolTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S_CoolTime& a, S_CoolTime& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CoolTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CoolTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CoolTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CoolTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CoolTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_CoolTime& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CoolTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skill.S_CoolTime";
  }
  protected:
  explicit S_CoolTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kSkillTypeFieldNumber = 2,
  };
  // int32 time = 1;
  void clear_time();
  int32_t time() const;
  void set_time(int32_t value);
  private:
  int32_t _internal_time() const;
  void _internal_set_time(int32_t value);
  public:

  // .skill.SKILLTYPE skill_type = 2;
  void clear_skill_type();
  ::skill::SKILLTYPE skill_type() const;
  void set_skill_type(::skill::SKILLTYPE value);
  private:
  ::skill::SKILLTYPE _internal_skill_type() const;
  void _internal_set_skill_type(::skill::SKILLTYPE value);
  public:

  // @@protoc_insertion_point(class_scope:skill.S_CoolTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t time_;
  int skill_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Skill_2eproto;
};
// -------------------------------------------------------------------

class C_Warrior_Attack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skill.C_Warrior_Attack) */ {
 public:
  inline C_Warrior_Attack() : C_Warrior_Attack(nullptr) {}
  ~C_Warrior_Attack() override;
  explicit PROTOBUF_CONSTEXPR C_Warrior_Attack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Warrior_Attack(const C_Warrior_Attack& from);
  C_Warrior_Attack(C_Warrior_Attack&& from) noexcept
    : C_Warrior_Attack() {
    *this = ::std::move(from);
  }

  inline C_Warrior_Attack& operator=(const C_Warrior_Attack& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Warrior_Attack& operator=(C_Warrior_Attack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Warrior_Attack& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Warrior_Attack* internal_default_instance() {
    return reinterpret_cast<const C_Warrior_Attack*>(
               &_C_Warrior_Attack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C_Warrior_Attack& a, C_Warrior_Attack& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Warrior_Attack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Warrior_Attack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Warrior_Attack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Warrior_Attack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Warrior_Attack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_Warrior_Attack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Warrior_Attack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skill.C_Warrior_Attack";
  }
  protected:
  explicit C_Warrior_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:skill.C_Warrior_Attack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Skill_2eproto;
};
// -------------------------------------------------------------------

class S_Warrior_Attack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skill.S_Warrior_Attack) */ {
 public:
  inline S_Warrior_Attack() : S_Warrior_Attack(nullptr) {}
  ~S_Warrior_Attack() override;
  explicit PROTOBUF_CONSTEXPR S_Warrior_Attack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Warrior_Attack(const S_Warrior_Attack& from);
  S_Warrior_Attack(S_Warrior_Attack&& from) noexcept
    : S_Warrior_Attack() {
    *this = ::std::move(from);
  }

  inline S_Warrior_Attack& operator=(const S_Warrior_Attack& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Warrior_Attack& operator=(S_Warrior_Attack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Warrior_Attack& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Warrior_Attack* internal_default_instance() {
    return reinterpret_cast<const S_Warrior_Attack*>(
               &_S_Warrior_Attack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_Warrior_Attack& a, S_Warrior_Attack& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Warrior_Attack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Warrior_Attack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Warrior_Attack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Warrior_Attack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Warrior_Attack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_Warrior_Attack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Warrior_Attack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skill.S_Warrior_Attack";
  }
  protected:
  explicit S_Warrior_Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:skill.S_Warrior_Attack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Skill_2eproto;
};
// -------------------------------------------------------------------

class C_Warrior_Q final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skill.C_Warrior_Q) */ {
 public:
  inline C_Warrior_Q() : C_Warrior_Q(nullptr) {}
  ~C_Warrior_Q() override;
  explicit PROTOBUF_CONSTEXPR C_Warrior_Q(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Warrior_Q(const C_Warrior_Q& from);
  C_Warrior_Q(C_Warrior_Q&& from) noexcept
    : C_Warrior_Q() {
    *this = ::std::move(from);
  }

  inline C_Warrior_Q& operator=(const C_Warrior_Q& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Warrior_Q& operator=(C_Warrior_Q&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Warrior_Q& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Warrior_Q* internal_default_instance() {
    return reinterpret_cast<const C_Warrior_Q*>(
               &_C_Warrior_Q_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_Warrior_Q& a, C_Warrior_Q& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Warrior_Q* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Warrior_Q* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Warrior_Q* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Warrior_Q>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Warrior_Q& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_Warrior_Q& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Warrior_Q* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skill.C_Warrior_Q";
  }
  protected:
  explicit C_Warrior_Q(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // uint64 target_id = 2;
  void clear_target_id();
  uint64_t target_id() const;
  void set_target_id(uint64_t value);
  private:
  uint64_t _internal_target_id() const;
  void _internal_set_target_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:skill.C_Warrior_Q)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t object_id_;
  uint64_t target_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Skill_2eproto;
};
// -------------------------------------------------------------------

class S_Warrior_Q final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skill.S_Warrior_Q) */ {
 public:
  inline S_Warrior_Q() : S_Warrior_Q(nullptr) {}
  ~S_Warrior_Q() override;
  explicit PROTOBUF_CONSTEXPR S_Warrior_Q(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Warrior_Q(const S_Warrior_Q& from);
  S_Warrior_Q(S_Warrior_Q&& from) noexcept
    : S_Warrior_Q() {
    *this = ::std::move(from);
  }

  inline S_Warrior_Q& operator=(const S_Warrior_Q& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Warrior_Q& operator=(S_Warrior_Q&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Warrior_Q& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Warrior_Q* internal_default_instance() {
    return reinterpret_cast<const S_Warrior_Q*>(
               &_S_Warrior_Q_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_Warrior_Q& a, S_Warrior_Q& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Warrior_Q* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Warrior_Q* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Warrior_Q* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Warrior_Q>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Warrior_Q& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_Warrior_Q& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Warrior_Q* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skill.S_Warrior_Q";
  }
  protected:
  explicit S_Warrior_Q(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // uint64 target_id = 2;
  void clear_target_id();
  uint64_t target_id() const;
  void set_target_id(uint64_t value);
  private:
  uint64_t _internal_target_id() const;
  void _internal_set_target_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:skill.S_Warrior_Q)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t object_id_;
  uint64_t target_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Skill_2eproto;
};
// -------------------------------------------------------------------

class C_Warrior_E final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skill.C_Warrior_E) */ {
 public:
  inline C_Warrior_E() : C_Warrior_E(nullptr) {}
  ~C_Warrior_E() override;
  explicit PROTOBUF_CONSTEXPR C_Warrior_E(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Warrior_E(const C_Warrior_E& from);
  C_Warrior_E(C_Warrior_E&& from) noexcept
    : C_Warrior_E() {
    *this = ::std::move(from);
  }

  inline C_Warrior_E& operator=(const C_Warrior_E& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Warrior_E& operator=(C_Warrior_E&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Warrior_E& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Warrior_E* internal_default_instance() {
    return reinterpret_cast<const C_Warrior_E*>(
               &_C_Warrior_E_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C_Warrior_E& a, C_Warrior_E& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Warrior_E* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Warrior_E* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Warrior_E* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Warrior_E>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Warrior_E& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_Warrior_E& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Warrior_E* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skill.C_Warrior_E";
  }
  protected:
  explicit C_Warrior_E(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:skill.C_Warrior_E)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Skill_2eproto;
};
// -------------------------------------------------------------------

class S_Warrior_E final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skill.S_Warrior_E) */ {
 public:
  inline S_Warrior_E() : S_Warrior_E(nullptr) {}
  ~S_Warrior_E() override;
  explicit PROTOBUF_CONSTEXPR S_Warrior_E(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Warrior_E(const S_Warrior_E& from);
  S_Warrior_E(S_Warrior_E&& from) noexcept
    : S_Warrior_E() {
    *this = ::std::move(from);
  }

  inline S_Warrior_E& operator=(const S_Warrior_E& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Warrior_E& operator=(S_Warrior_E&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Warrior_E& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Warrior_E* internal_default_instance() {
    return reinterpret_cast<const S_Warrior_E*>(
               &_S_Warrior_E_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_Warrior_E& a, S_Warrior_E& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Warrior_E* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Warrior_E* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Warrior_E* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Warrior_E>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Warrior_E& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_Warrior_E& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Warrior_E* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skill.S_Warrior_E";
  }
  protected:
  explicit S_Warrior_E(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:skill.S_Warrior_E)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Skill_2eproto;
};
// -------------------------------------------------------------------

class C_Warrior_R final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skill.C_Warrior_R) */ {
 public:
  inline C_Warrior_R() : C_Warrior_R(nullptr) {}
  ~C_Warrior_R() override;
  explicit PROTOBUF_CONSTEXPR C_Warrior_R(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Warrior_R(const C_Warrior_R& from);
  C_Warrior_R(C_Warrior_R&& from) noexcept
    : C_Warrior_R() {
    *this = ::std::move(from);
  }

  inline C_Warrior_R& operator=(const C_Warrior_R& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Warrior_R& operator=(C_Warrior_R&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Warrior_R& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Warrior_R* internal_default_instance() {
    return reinterpret_cast<const C_Warrior_R*>(
               &_C_Warrior_R_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C_Warrior_R& a, C_Warrior_R& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Warrior_R* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Warrior_R* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Warrior_R* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Warrior_R>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Warrior_R& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_Warrior_R& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Warrior_R* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skill.C_Warrior_R";
  }
  protected:
  explicit C_Warrior_R(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:skill.C_Warrior_R)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Skill_2eproto;
};
// -------------------------------------------------------------------

class S_Warrior_R final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skill.S_Warrior_R) */ {
 public:
  inline S_Warrior_R() : S_Warrior_R(nullptr) {}
  ~S_Warrior_R() override;
  explicit PROTOBUF_CONSTEXPR S_Warrior_R(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Warrior_R(const S_Warrior_R& from);
  S_Warrior_R(S_Warrior_R&& from) noexcept
    : S_Warrior_R() {
    *this = ::std::move(from);
  }

  inline S_Warrior_R& operator=(const S_Warrior_R& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Warrior_R& operator=(S_Warrior_R&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Warrior_R& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Warrior_R* internal_default_instance() {
    return reinterpret_cast<const S_Warrior_R*>(
               &_S_Warrior_R_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_Warrior_R& a, S_Warrior_R& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Warrior_R* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Warrior_R* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Warrior_R* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Warrior_R>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Warrior_R& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_Warrior_R& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Warrior_R* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skill.S_Warrior_R";
  }
  protected:
  explicit S_Warrior_R(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:skill.S_Warrior_R)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Skill_2eproto;
};
// -------------------------------------------------------------------

class C_Warrior_LS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skill.C_Warrior_LS) */ {
 public:
  inline C_Warrior_LS() : C_Warrior_LS(nullptr) {}
  ~C_Warrior_LS() override;
  explicit PROTOBUF_CONSTEXPR C_Warrior_LS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Warrior_LS(const C_Warrior_LS& from);
  C_Warrior_LS(C_Warrior_LS&& from) noexcept
    : C_Warrior_LS() {
    *this = ::std::move(from);
  }

  inline C_Warrior_LS& operator=(const C_Warrior_LS& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Warrior_LS& operator=(C_Warrior_LS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Warrior_LS& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Warrior_LS* internal_default_instance() {
    return reinterpret_cast<const C_Warrior_LS*>(
               &_C_Warrior_LS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C_Warrior_LS& a, C_Warrior_LS& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Warrior_LS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Warrior_LS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Warrior_LS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Warrior_LS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Warrior_LS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_Warrior_LS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Warrior_LS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skill.C_Warrior_LS";
  }
  protected:
  explicit C_Warrior_LS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kYawFieldNumber = 5,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float yaw = 5;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:skill.C_Warrior_LS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t object_id_;
  float x_;
  float y_;
  float z_;
  float yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Skill_2eproto;
};
// -------------------------------------------------------------------

class S_Warrior_LS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:skill.S_Warrior_LS) */ {
 public:
  inline S_Warrior_LS() : S_Warrior_LS(nullptr) {}
  ~S_Warrior_LS() override;
  explicit PROTOBUF_CONSTEXPR S_Warrior_LS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Warrior_LS(const S_Warrior_LS& from);
  S_Warrior_LS(S_Warrior_LS&& from) noexcept
    : S_Warrior_LS() {
    *this = ::std::move(from);
  }

  inline S_Warrior_LS& operator=(const S_Warrior_LS& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Warrior_LS& operator=(S_Warrior_LS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Warrior_LS& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Warrior_LS* internal_default_instance() {
    return reinterpret_cast<const S_Warrior_LS*>(
               &_S_Warrior_LS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S_Warrior_LS& a, S_Warrior_LS& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Warrior_LS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Warrior_LS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Warrior_LS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Warrior_LS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Warrior_LS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_Warrior_LS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Warrior_LS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "skill.S_Warrior_LS";
  }
  protected:
  explicit S_Warrior_LS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kYawFieldNumber = 5,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float yaw = 5;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:skill.S_Warrior_LS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t object_id_;
  float x_;
  float y_;
  float z_;
  float yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Skill_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S_CoolTime

// int32 time = 1;
inline void S_CoolTime::clear_time() {
  time_ = 0;
}
inline int32_t S_CoolTime::_internal_time() const {
  return time_;
}
inline int32_t S_CoolTime::time() const {
  // @@protoc_insertion_point(field_get:skill.S_CoolTime.time)
  return _internal_time();
}
inline void S_CoolTime::_internal_set_time(int32_t value) {
  
  time_ = value;
}
inline void S_CoolTime::set_time(int32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:skill.S_CoolTime.time)
}

// .skill.SKILLTYPE skill_type = 2;
inline void S_CoolTime::clear_skill_type() {
  skill_type_ = 0;
}
inline ::skill::SKILLTYPE S_CoolTime::_internal_skill_type() const {
  return static_cast< ::skill::SKILLTYPE >(skill_type_);
}
inline ::skill::SKILLTYPE S_CoolTime::skill_type() const {
  // @@protoc_insertion_point(field_get:skill.S_CoolTime.skill_type)
  return _internal_skill_type();
}
inline void S_CoolTime::_internal_set_skill_type(::skill::SKILLTYPE value) {
  
  skill_type_ = value;
}
inline void S_CoolTime::set_skill_type(::skill::SKILLTYPE value) {
  _internal_set_skill_type(value);
  // @@protoc_insertion_point(field_set:skill.S_CoolTime.skill_type)
}

// -------------------------------------------------------------------

// C_Warrior_Attack

// uint64 object_id = 1;
inline void C_Warrior_Attack::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline uint64_t C_Warrior_Attack::_internal_object_id() const {
  return object_id_;
}
inline uint64_t C_Warrior_Attack::object_id() const {
  // @@protoc_insertion_point(field_get:skill.C_Warrior_Attack.object_id)
  return _internal_object_id();
}
inline void C_Warrior_Attack::_internal_set_object_id(uint64_t value) {
  
  object_id_ = value;
}
inline void C_Warrior_Attack::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:skill.C_Warrior_Attack.object_id)
}

// -------------------------------------------------------------------

// S_Warrior_Attack

// uint64 object_id = 1;
inline void S_Warrior_Attack::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline uint64_t S_Warrior_Attack::_internal_object_id() const {
  return object_id_;
}
inline uint64_t S_Warrior_Attack::object_id() const {
  // @@protoc_insertion_point(field_get:skill.S_Warrior_Attack.object_id)
  return _internal_object_id();
}
inline void S_Warrior_Attack::_internal_set_object_id(uint64_t value) {
  
  object_id_ = value;
}
inline void S_Warrior_Attack::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:skill.S_Warrior_Attack.object_id)
}

// -------------------------------------------------------------------

// C_Warrior_Q

// uint64 object_id = 1;
inline void C_Warrior_Q::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline uint64_t C_Warrior_Q::_internal_object_id() const {
  return object_id_;
}
inline uint64_t C_Warrior_Q::object_id() const {
  // @@protoc_insertion_point(field_get:skill.C_Warrior_Q.object_id)
  return _internal_object_id();
}
inline void C_Warrior_Q::_internal_set_object_id(uint64_t value) {
  
  object_id_ = value;
}
inline void C_Warrior_Q::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:skill.C_Warrior_Q.object_id)
}

// uint64 target_id = 2;
inline void C_Warrior_Q::clear_target_id() {
  target_id_ = uint64_t{0u};
}
inline uint64_t C_Warrior_Q::_internal_target_id() const {
  return target_id_;
}
inline uint64_t C_Warrior_Q::target_id() const {
  // @@protoc_insertion_point(field_get:skill.C_Warrior_Q.target_id)
  return _internal_target_id();
}
inline void C_Warrior_Q::_internal_set_target_id(uint64_t value) {
  
  target_id_ = value;
}
inline void C_Warrior_Q::set_target_id(uint64_t value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:skill.C_Warrior_Q.target_id)
}

// -------------------------------------------------------------------

// S_Warrior_Q

// uint64 object_id = 1;
inline void S_Warrior_Q::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline uint64_t S_Warrior_Q::_internal_object_id() const {
  return object_id_;
}
inline uint64_t S_Warrior_Q::object_id() const {
  // @@protoc_insertion_point(field_get:skill.S_Warrior_Q.object_id)
  return _internal_object_id();
}
inline void S_Warrior_Q::_internal_set_object_id(uint64_t value) {
  
  object_id_ = value;
}
inline void S_Warrior_Q::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:skill.S_Warrior_Q.object_id)
}

// uint64 target_id = 2;
inline void S_Warrior_Q::clear_target_id() {
  target_id_ = uint64_t{0u};
}
inline uint64_t S_Warrior_Q::_internal_target_id() const {
  return target_id_;
}
inline uint64_t S_Warrior_Q::target_id() const {
  // @@protoc_insertion_point(field_get:skill.S_Warrior_Q.target_id)
  return _internal_target_id();
}
inline void S_Warrior_Q::_internal_set_target_id(uint64_t value) {
  
  target_id_ = value;
}
inline void S_Warrior_Q::set_target_id(uint64_t value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:skill.S_Warrior_Q.target_id)
}

// -------------------------------------------------------------------

// C_Warrior_E

// uint64 object_id = 1;
inline void C_Warrior_E::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline uint64_t C_Warrior_E::_internal_object_id() const {
  return object_id_;
}
inline uint64_t C_Warrior_E::object_id() const {
  // @@protoc_insertion_point(field_get:skill.C_Warrior_E.object_id)
  return _internal_object_id();
}
inline void C_Warrior_E::_internal_set_object_id(uint64_t value) {
  
  object_id_ = value;
}
inline void C_Warrior_E::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:skill.C_Warrior_E.object_id)
}

// -------------------------------------------------------------------

// S_Warrior_E

// uint64 object_id = 1;
inline void S_Warrior_E::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline uint64_t S_Warrior_E::_internal_object_id() const {
  return object_id_;
}
inline uint64_t S_Warrior_E::object_id() const {
  // @@protoc_insertion_point(field_get:skill.S_Warrior_E.object_id)
  return _internal_object_id();
}
inline void S_Warrior_E::_internal_set_object_id(uint64_t value) {
  
  object_id_ = value;
}
inline void S_Warrior_E::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:skill.S_Warrior_E.object_id)
}

// -------------------------------------------------------------------

// C_Warrior_R

// uint64 object_id = 1;
inline void C_Warrior_R::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline uint64_t C_Warrior_R::_internal_object_id() const {
  return object_id_;
}
inline uint64_t C_Warrior_R::object_id() const {
  // @@protoc_insertion_point(field_get:skill.C_Warrior_R.object_id)
  return _internal_object_id();
}
inline void C_Warrior_R::_internal_set_object_id(uint64_t value) {
  
  object_id_ = value;
}
inline void C_Warrior_R::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:skill.C_Warrior_R.object_id)
}

// -------------------------------------------------------------------

// S_Warrior_R

// uint64 object_id = 1;
inline void S_Warrior_R::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline uint64_t S_Warrior_R::_internal_object_id() const {
  return object_id_;
}
inline uint64_t S_Warrior_R::object_id() const {
  // @@protoc_insertion_point(field_get:skill.S_Warrior_R.object_id)
  return _internal_object_id();
}
inline void S_Warrior_R::_internal_set_object_id(uint64_t value) {
  
  object_id_ = value;
}
inline void S_Warrior_R::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:skill.S_Warrior_R.object_id)
}

// -------------------------------------------------------------------

// C_Warrior_LS

// uint64 object_id = 1;
inline void C_Warrior_LS::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline uint64_t C_Warrior_LS::_internal_object_id() const {
  return object_id_;
}
inline uint64_t C_Warrior_LS::object_id() const {
  // @@protoc_insertion_point(field_get:skill.C_Warrior_LS.object_id)
  return _internal_object_id();
}
inline void C_Warrior_LS::_internal_set_object_id(uint64_t value) {
  
  object_id_ = value;
}
inline void C_Warrior_LS::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:skill.C_Warrior_LS.object_id)
}

// float x = 2;
inline void C_Warrior_LS::clear_x() {
  x_ = 0;
}
inline float C_Warrior_LS::_internal_x() const {
  return x_;
}
inline float C_Warrior_LS::x() const {
  // @@protoc_insertion_point(field_get:skill.C_Warrior_LS.x)
  return _internal_x();
}
inline void C_Warrior_LS::_internal_set_x(float value) {
  
  x_ = value;
}
inline void C_Warrior_LS::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:skill.C_Warrior_LS.x)
}

// float y = 3;
inline void C_Warrior_LS::clear_y() {
  y_ = 0;
}
inline float C_Warrior_LS::_internal_y() const {
  return y_;
}
inline float C_Warrior_LS::y() const {
  // @@protoc_insertion_point(field_get:skill.C_Warrior_LS.y)
  return _internal_y();
}
inline void C_Warrior_LS::_internal_set_y(float value) {
  
  y_ = value;
}
inline void C_Warrior_LS::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:skill.C_Warrior_LS.y)
}

// float z = 4;
inline void C_Warrior_LS::clear_z() {
  z_ = 0;
}
inline float C_Warrior_LS::_internal_z() const {
  return z_;
}
inline float C_Warrior_LS::z() const {
  // @@protoc_insertion_point(field_get:skill.C_Warrior_LS.z)
  return _internal_z();
}
inline void C_Warrior_LS::_internal_set_z(float value) {
  
  z_ = value;
}
inline void C_Warrior_LS::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:skill.C_Warrior_LS.z)
}

// float yaw = 5;
inline void C_Warrior_LS::clear_yaw() {
  yaw_ = 0;
}
inline float C_Warrior_LS::_internal_yaw() const {
  return yaw_;
}
inline float C_Warrior_LS::yaw() const {
  // @@protoc_insertion_point(field_get:skill.C_Warrior_LS.yaw)
  return _internal_yaw();
}
inline void C_Warrior_LS::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void C_Warrior_LS::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:skill.C_Warrior_LS.yaw)
}

// -------------------------------------------------------------------

// S_Warrior_LS

// uint64 object_id = 1;
inline void S_Warrior_LS::clear_object_id() {
  object_id_ = uint64_t{0u};
}
inline uint64_t S_Warrior_LS::_internal_object_id() const {
  return object_id_;
}
inline uint64_t S_Warrior_LS::object_id() const {
  // @@protoc_insertion_point(field_get:skill.S_Warrior_LS.object_id)
  return _internal_object_id();
}
inline void S_Warrior_LS::_internal_set_object_id(uint64_t value) {
  
  object_id_ = value;
}
inline void S_Warrior_LS::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:skill.S_Warrior_LS.object_id)
}

// float x = 2;
inline void S_Warrior_LS::clear_x() {
  x_ = 0;
}
inline float S_Warrior_LS::_internal_x() const {
  return x_;
}
inline float S_Warrior_LS::x() const {
  // @@protoc_insertion_point(field_get:skill.S_Warrior_LS.x)
  return _internal_x();
}
inline void S_Warrior_LS::_internal_set_x(float value) {
  
  x_ = value;
}
inline void S_Warrior_LS::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:skill.S_Warrior_LS.x)
}

// float y = 3;
inline void S_Warrior_LS::clear_y() {
  y_ = 0;
}
inline float S_Warrior_LS::_internal_y() const {
  return y_;
}
inline float S_Warrior_LS::y() const {
  // @@protoc_insertion_point(field_get:skill.S_Warrior_LS.y)
  return _internal_y();
}
inline void S_Warrior_LS::_internal_set_y(float value) {
  
  y_ = value;
}
inline void S_Warrior_LS::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:skill.S_Warrior_LS.y)
}

// float z = 4;
inline void S_Warrior_LS::clear_z() {
  z_ = 0;
}
inline float S_Warrior_LS::_internal_z() const {
  return z_;
}
inline float S_Warrior_LS::z() const {
  // @@protoc_insertion_point(field_get:skill.S_Warrior_LS.z)
  return _internal_z();
}
inline void S_Warrior_LS::_internal_set_z(float value) {
  
  z_ = value;
}
inline void S_Warrior_LS::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:skill.S_Warrior_LS.z)
}

// float yaw = 5;
inline void S_Warrior_LS::clear_yaw() {
  yaw_ = 0;
}
inline float S_Warrior_LS::_internal_yaw() const {
  return yaw_;
}
inline float S_Warrior_LS::yaw() const {
  // @@protoc_insertion_point(field_get:skill.S_Warrior_LS.yaw)
  return _internal_yaw();
}
inline void S_Warrior_LS::_internal_set_yaw(float value) {
  
  yaw_ = value;
}
inline void S_Warrior_LS::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:skill.S_Warrior_LS.yaw)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace skill

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::skill::SKILLTYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::skill::SKILLTYPE>() {
  return ::skill::SKILLTYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Skill_2eproto
