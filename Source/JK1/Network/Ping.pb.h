// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ping.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Ping_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Ping_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Ping_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Ping_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Ping_2eproto;
namespace ping {
class C_CompletePing;
struct C_CompletePingDefaultTypeInternal;
extern C_CompletePingDefaultTypeInternal _C_CompletePing_default_instance_;
class C_Ping;
struct C_PingDefaultTypeInternal;
extern C_PingDefaultTypeInternal _C_Ping_default_instance_;
class S_Pong;
struct S_PongDefaultTypeInternal;
extern S_PongDefaultTypeInternal _S_Pong_default_instance_;
}  // namespace ping
PROTOBUF_NAMESPACE_OPEN
template<> ::ping::C_CompletePing* Arena::CreateMaybeMessage<::ping::C_CompletePing>(Arena*);
template<> ::ping::C_Ping* Arena::CreateMaybeMessage<::ping::C_Ping>(Arena*);
template<> ::ping::S_Pong* Arena::CreateMaybeMessage<::ping::S_Pong>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ping {

// ===================================================================

class C_Ping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ping.C_Ping) */ {
 public:
  inline C_Ping() : C_Ping(nullptr) {}
  ~C_Ping() override;
  explicit PROTOBUF_CONSTEXPR C_Ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Ping(const C_Ping& from);
  C_Ping(C_Ping&& from) noexcept
    : C_Ping() {
    *this = ::std::move(from);
  }

  inline C_Ping& operator=(const C_Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Ping& operator=(C_Ping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Ping* internal_default_instance() {
    return reinterpret_cast<const C_Ping*>(
               &_C_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_Ping& a, C_Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Ping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Ping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Ping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_Ping& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Ping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ping.C_Ping";
  }
  protected:
  explicit C_Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceNumberFieldNumber = 1,
    kClientSendTimeFieldNumber = 2,
  };
  // uint64 sequence_number = 1;
  void clear_sequence_number();
  uint64_t sequence_number() const;
  void set_sequence_number(uint64_t value);
  private:
  uint64_t _internal_sequence_number() const;
  void _internal_set_sequence_number(uint64_t value);
  public:

  // uint64 client_send_time = 2;
  void clear_client_send_time();
  uint64_t client_send_time() const;
  void set_client_send_time(uint64_t value);
  private:
  uint64_t _internal_client_send_time() const;
  void _internal_set_client_send_time(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ping.C_Ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t sequence_number_;
  uint64_t client_send_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ping_2eproto;
};
// -------------------------------------------------------------------

class S_Pong final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ping.S_Pong) */ {
 public:
  inline S_Pong() : S_Pong(nullptr) {}
  ~S_Pong() override;
  explicit PROTOBUF_CONSTEXPR S_Pong(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Pong(const S_Pong& from);
  S_Pong(S_Pong&& from) noexcept
    : S_Pong() {
    *this = ::std::move(from);
  }

  inline S_Pong& operator=(const S_Pong& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Pong& operator=(S_Pong&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Pong& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Pong* internal_default_instance() {
    return reinterpret_cast<const S_Pong*>(
               &_S_Pong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_Pong& a, S_Pong& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Pong* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Pong* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Pong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Pong>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Pong& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_Pong& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Pong* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ping.S_Pong";
  }
  protected:
  explicit S_Pong(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceNumberFieldNumber = 1,
    kClientSendTimeFieldNumber = 2,
    kServerReceiveTimeFieldNumber = 3,
    kServerSendTimeFieldNumber = 4,
  };
  // uint64 sequence_number = 1;
  void clear_sequence_number();
  uint64_t sequence_number() const;
  void set_sequence_number(uint64_t value);
  private:
  uint64_t _internal_sequence_number() const;
  void _internal_set_sequence_number(uint64_t value);
  public:

  // uint64 client_send_time = 2;
  void clear_client_send_time();
  uint64_t client_send_time() const;
  void set_client_send_time(uint64_t value);
  private:
  uint64_t _internal_client_send_time() const;
  void _internal_set_client_send_time(uint64_t value);
  public:

  // uint64 server_receive_time = 3;
  void clear_server_receive_time();
  uint64_t server_receive_time() const;
  void set_server_receive_time(uint64_t value);
  private:
  uint64_t _internal_server_receive_time() const;
  void _internal_set_server_receive_time(uint64_t value);
  public:

  // uint64 server_send_time = 4;
  void clear_server_send_time();
  uint64_t server_send_time() const;
  void set_server_send_time(uint64_t value);
  private:
  uint64_t _internal_server_send_time() const;
  void _internal_set_server_send_time(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ping.S_Pong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t sequence_number_;
  uint64_t client_send_time_;
  uint64_t server_receive_time_;
  uint64_t server_send_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ping_2eproto;
};
// -------------------------------------------------------------------

class C_CompletePing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ping.C_CompletePing) */ {
 public:
  inline C_CompletePing() : C_CompletePing(nullptr) {}
  ~C_CompletePing() override;
  explicit PROTOBUF_CONSTEXPR C_CompletePing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CompletePing(const C_CompletePing& from);
  C_CompletePing(C_CompletePing&& from) noexcept
    : C_CompletePing() {
    *this = ::std::move(from);
  }

  inline C_CompletePing& operator=(const C_CompletePing& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CompletePing& operator=(C_CompletePing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CompletePing& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CompletePing* internal_default_instance() {
    return reinterpret_cast<const C_CompletePing*>(
               &_C_CompletePing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_CompletePing& a, C_CompletePing& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CompletePing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CompletePing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CompletePing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CompletePing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CompletePing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_CompletePing& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CompletePing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ping.C_CompletePing";
  }
  protected:
  explicit C_CompletePing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceNumberFieldNumber = 1,
    kClientSendTimeFieldNumber = 2,
    kServerReceiveTimeFieldNumber = 3,
    kServerSendTimeFieldNumber = 4,
    kClientReceiveTimeFieldNumber = 5,
  };
  // uint64 sequence_number = 1;
  void clear_sequence_number();
  uint64_t sequence_number() const;
  void set_sequence_number(uint64_t value);
  private:
  uint64_t _internal_sequence_number() const;
  void _internal_set_sequence_number(uint64_t value);
  public:

  // uint64 client_send_time = 2;
  void clear_client_send_time();
  uint64_t client_send_time() const;
  void set_client_send_time(uint64_t value);
  private:
  uint64_t _internal_client_send_time() const;
  void _internal_set_client_send_time(uint64_t value);
  public:

  // uint64 server_receive_time = 3;
  void clear_server_receive_time();
  uint64_t server_receive_time() const;
  void set_server_receive_time(uint64_t value);
  private:
  uint64_t _internal_server_receive_time() const;
  void _internal_set_server_receive_time(uint64_t value);
  public:

  // uint64 server_send_time = 4;
  void clear_server_send_time();
  uint64_t server_send_time() const;
  void set_server_send_time(uint64_t value);
  private:
  uint64_t _internal_server_send_time() const;
  void _internal_set_server_send_time(uint64_t value);
  public:

  // uint64 client_receive_time = 5;
  void clear_client_receive_time();
  uint64_t client_receive_time() const;
  void set_client_receive_time(uint64_t value);
  private:
  uint64_t _internal_client_receive_time() const;
  void _internal_set_client_receive_time(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ping.C_CompletePing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t sequence_number_;
  uint64_t client_send_time_;
  uint64_t server_receive_time_;
  uint64_t server_send_time_;
  uint64_t client_receive_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ping_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_Ping

// uint64 sequence_number = 1;
inline void C_Ping::clear_sequence_number() {
  sequence_number_ = uint64_t{0u};
}
inline uint64_t C_Ping::_internal_sequence_number() const {
  return sequence_number_;
}
inline uint64_t C_Ping::sequence_number() const {
  // @@protoc_insertion_point(field_get:ping.C_Ping.sequence_number)
  return _internal_sequence_number();
}
inline void C_Ping::_internal_set_sequence_number(uint64_t value) {
  
  sequence_number_ = value;
}
inline void C_Ping::set_sequence_number(uint64_t value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:ping.C_Ping.sequence_number)
}

// uint64 client_send_time = 2;
inline void C_Ping::clear_client_send_time() {
  client_send_time_ = uint64_t{0u};
}
inline uint64_t C_Ping::_internal_client_send_time() const {
  return client_send_time_;
}
inline uint64_t C_Ping::client_send_time() const {
  // @@protoc_insertion_point(field_get:ping.C_Ping.client_send_time)
  return _internal_client_send_time();
}
inline void C_Ping::_internal_set_client_send_time(uint64_t value) {
  
  client_send_time_ = value;
}
inline void C_Ping::set_client_send_time(uint64_t value) {
  _internal_set_client_send_time(value);
  // @@protoc_insertion_point(field_set:ping.C_Ping.client_send_time)
}

// -------------------------------------------------------------------

// S_Pong

// uint64 sequence_number = 1;
inline void S_Pong::clear_sequence_number() {
  sequence_number_ = uint64_t{0u};
}
inline uint64_t S_Pong::_internal_sequence_number() const {
  return sequence_number_;
}
inline uint64_t S_Pong::sequence_number() const {
  // @@protoc_insertion_point(field_get:ping.S_Pong.sequence_number)
  return _internal_sequence_number();
}
inline void S_Pong::_internal_set_sequence_number(uint64_t value) {
  
  sequence_number_ = value;
}
inline void S_Pong::set_sequence_number(uint64_t value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:ping.S_Pong.sequence_number)
}

// uint64 client_send_time = 2;
inline void S_Pong::clear_client_send_time() {
  client_send_time_ = uint64_t{0u};
}
inline uint64_t S_Pong::_internal_client_send_time() const {
  return client_send_time_;
}
inline uint64_t S_Pong::client_send_time() const {
  // @@protoc_insertion_point(field_get:ping.S_Pong.client_send_time)
  return _internal_client_send_time();
}
inline void S_Pong::_internal_set_client_send_time(uint64_t value) {
  
  client_send_time_ = value;
}
inline void S_Pong::set_client_send_time(uint64_t value) {
  _internal_set_client_send_time(value);
  // @@protoc_insertion_point(field_set:ping.S_Pong.client_send_time)
}

// uint64 server_receive_time = 3;
inline void S_Pong::clear_server_receive_time() {
  server_receive_time_ = uint64_t{0u};
}
inline uint64_t S_Pong::_internal_server_receive_time() const {
  return server_receive_time_;
}
inline uint64_t S_Pong::server_receive_time() const {
  // @@protoc_insertion_point(field_get:ping.S_Pong.server_receive_time)
  return _internal_server_receive_time();
}
inline void S_Pong::_internal_set_server_receive_time(uint64_t value) {
  
  server_receive_time_ = value;
}
inline void S_Pong::set_server_receive_time(uint64_t value) {
  _internal_set_server_receive_time(value);
  // @@protoc_insertion_point(field_set:ping.S_Pong.server_receive_time)
}

// uint64 server_send_time = 4;
inline void S_Pong::clear_server_send_time() {
  server_send_time_ = uint64_t{0u};
}
inline uint64_t S_Pong::_internal_server_send_time() const {
  return server_send_time_;
}
inline uint64_t S_Pong::server_send_time() const {
  // @@protoc_insertion_point(field_get:ping.S_Pong.server_send_time)
  return _internal_server_send_time();
}
inline void S_Pong::_internal_set_server_send_time(uint64_t value) {
  
  server_send_time_ = value;
}
inline void S_Pong::set_server_send_time(uint64_t value) {
  _internal_set_server_send_time(value);
  // @@protoc_insertion_point(field_set:ping.S_Pong.server_send_time)
}

// -------------------------------------------------------------------

// C_CompletePing

// uint64 sequence_number = 1;
inline void C_CompletePing::clear_sequence_number() {
  sequence_number_ = uint64_t{0u};
}
inline uint64_t C_CompletePing::_internal_sequence_number() const {
  return sequence_number_;
}
inline uint64_t C_CompletePing::sequence_number() const {
  // @@protoc_insertion_point(field_get:ping.C_CompletePing.sequence_number)
  return _internal_sequence_number();
}
inline void C_CompletePing::_internal_set_sequence_number(uint64_t value) {
  
  sequence_number_ = value;
}
inline void C_CompletePing::set_sequence_number(uint64_t value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:ping.C_CompletePing.sequence_number)
}

// uint64 client_send_time = 2;
inline void C_CompletePing::clear_client_send_time() {
  client_send_time_ = uint64_t{0u};
}
inline uint64_t C_CompletePing::_internal_client_send_time() const {
  return client_send_time_;
}
inline uint64_t C_CompletePing::client_send_time() const {
  // @@protoc_insertion_point(field_get:ping.C_CompletePing.client_send_time)
  return _internal_client_send_time();
}
inline void C_CompletePing::_internal_set_client_send_time(uint64_t value) {
  
  client_send_time_ = value;
}
inline void C_CompletePing::set_client_send_time(uint64_t value) {
  _internal_set_client_send_time(value);
  // @@protoc_insertion_point(field_set:ping.C_CompletePing.client_send_time)
}

// uint64 server_receive_time = 3;
inline void C_CompletePing::clear_server_receive_time() {
  server_receive_time_ = uint64_t{0u};
}
inline uint64_t C_CompletePing::_internal_server_receive_time() const {
  return server_receive_time_;
}
inline uint64_t C_CompletePing::server_receive_time() const {
  // @@protoc_insertion_point(field_get:ping.C_CompletePing.server_receive_time)
  return _internal_server_receive_time();
}
inline void C_CompletePing::_internal_set_server_receive_time(uint64_t value) {
  
  server_receive_time_ = value;
}
inline void C_CompletePing::set_server_receive_time(uint64_t value) {
  _internal_set_server_receive_time(value);
  // @@protoc_insertion_point(field_set:ping.C_CompletePing.server_receive_time)
}

// uint64 server_send_time = 4;
inline void C_CompletePing::clear_server_send_time() {
  server_send_time_ = uint64_t{0u};
}
inline uint64_t C_CompletePing::_internal_server_send_time() const {
  return server_send_time_;
}
inline uint64_t C_CompletePing::server_send_time() const {
  // @@protoc_insertion_point(field_get:ping.C_CompletePing.server_send_time)
  return _internal_server_send_time();
}
inline void C_CompletePing::_internal_set_server_send_time(uint64_t value) {
  
  server_send_time_ = value;
}
inline void C_CompletePing::set_server_send_time(uint64_t value) {
  _internal_set_server_send_time(value);
  // @@protoc_insertion_point(field_set:ping.C_CompletePing.server_send_time)
}

// uint64 client_receive_time = 5;
inline void C_CompletePing::clear_client_receive_time() {
  client_receive_time_ = uint64_t{0u};
}
inline uint64_t C_CompletePing::_internal_client_receive_time() const {
  return client_receive_time_;
}
inline uint64_t C_CompletePing::client_receive_time() const {
  // @@protoc_insertion_point(field_get:ping.C_CompletePing.client_receive_time)
  return _internal_client_receive_time();
}
inline void C_CompletePing::_internal_set_client_receive_time(uint64_t value) {
  
  client_receive_time_ = value;
}
inline void C_CompletePing::set_client_receive_time(uint64_t value) {
  _internal_set_client_receive_time(value);
  // @@protoc_insertion_point(field_set:ping.C_CompletePing.client_receive_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ping

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Ping_2eproto
