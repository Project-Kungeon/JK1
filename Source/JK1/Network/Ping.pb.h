// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ping.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Ping_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Ping_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Ping_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Ping_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Ping_2eproto;
namespace session {
class C_Ping;
struct C_PingDefaultTypeInternal;
extern C_PingDefaultTypeInternal _C_Ping_default_instance_;
class S_Ping;
struct S_PingDefaultTypeInternal;
extern S_PingDefaultTypeInternal _S_Ping_default_instance_;
}  // namespace session
PROTOBUF_NAMESPACE_OPEN
template<> ::session::C_Ping* Arena::CreateMaybeMessage<::session::C_Ping>(Arena*);
template<> ::session::S_Ping* Arena::CreateMaybeMessage<::session::S_Ping>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace session {

// ===================================================================

class C_Ping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:session.C_Ping) */ {
 public:
  inline C_Ping() : C_Ping(nullptr) {}
  ~C_Ping() override;
  explicit PROTOBUF_CONSTEXPR C_Ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_Ping(const C_Ping& from);
  C_Ping(C_Ping&& from) noexcept
    : C_Ping() {
    *this = ::std::move(from);
  }

  inline C_Ping& operator=(const C_Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_Ping& operator=(C_Ping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_Ping* internal_default_instance() {
    return reinterpret_cast<const C_Ping*>(
               &_C_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_Ping& a, C_Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(C_Ping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_Ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_Ping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_Ping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C_Ping& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_Ping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "session.C_Ping";
  }
  protected:
  explicit C_Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedAtFieldNumber = 2,
    kSessionIdFieldNumber = 1,
    kServerToClientIntervalFieldNumber = 3,
  };
  // .message.Timestamp created_at = 2;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::message::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::message::Timestamp* release_created_at();
  ::message::Timestamp* mutable_created_at();
  void set_allocated_created_at(::message::Timestamp* created_at);
  private:
  const ::message::Timestamp& _internal_created_at() const;
  ::message::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::message::Timestamp* created_at);
  ::message::Timestamp* unsafe_arena_release_created_at();

  // uint64 session_id = 1;
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // uint64 server_to_client_interval = 3;
  void clear_server_to_client_interval();
  uint64_t server_to_client_interval() const;
  void set_server_to_client_interval(uint64_t value);
  private:
  uint64_t _internal_server_to_client_interval() const;
  void _internal_set_server_to_client_interval(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:session.C_Ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::message::Timestamp* created_at_;
  uint64_t session_id_;
  uint64_t server_to_client_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ping_2eproto;
};
// -------------------------------------------------------------------

class S_Ping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:session.S_Ping) */ {
 public:
  inline S_Ping() : S_Ping(nullptr) {}
  ~S_Ping() override;
  explicit PROTOBUF_CONSTEXPR S_Ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_Ping(const S_Ping& from);
  S_Ping(S_Ping&& from) noexcept
    : S_Ping() {
    *this = ::std::move(from);
  }

  inline S_Ping& operator=(const S_Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_Ping& operator=(S_Ping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_Ping* internal_default_instance() {
    return reinterpret_cast<const S_Ping*>(
               &_S_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_Ping& a, S_Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(S_Ping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_Ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_Ping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_Ping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const S_Ping& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_Ping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "session.S_Ping";
  }
  protected:
  explicit S_Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedAtFieldNumber = 2,
    kSessionIdFieldNumber = 1,
    kClientToServerIntervalFieldNumber = 3,
  };
  // .message.Timestamp created_at = 2;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::message::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::message::Timestamp* release_created_at();
  ::message::Timestamp* mutable_created_at();
  void set_allocated_created_at(::message::Timestamp* created_at);
  private:
  const ::message::Timestamp& _internal_created_at() const;
  ::message::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::message::Timestamp* created_at);
  ::message::Timestamp* unsafe_arena_release_created_at();

  // uint64 session_id = 1;
  void clear_session_id();
  uint64_t session_id() const;
  void set_session_id(uint64_t value);
  private:
  uint64_t _internal_session_id() const;
  void _internal_set_session_id(uint64_t value);
  public:

  // uint64 client_to_server_interval = 3;
  void clear_client_to_server_interval();
  uint64_t client_to_server_interval() const;
  void set_client_to_server_interval(uint64_t value);
  private:
  uint64_t _internal_client_to_server_interval() const;
  void _internal_set_client_to_server_interval(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:session.S_Ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::message::Timestamp* created_at_;
  uint64_t session_id_;
  uint64_t client_to_server_interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Ping_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_Ping

// uint64 session_id = 1;
inline void C_Ping::clear_session_id() {
  session_id_ = uint64_t{0u};
}
inline uint64_t C_Ping::_internal_session_id() const {
  return session_id_;
}
inline uint64_t C_Ping::session_id() const {
  // @@protoc_insertion_point(field_get:session.C_Ping.session_id)
  return _internal_session_id();
}
inline void C_Ping::_internal_set_session_id(uint64_t value) {
  
  session_id_ = value;
}
inline void C_Ping::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:session.C_Ping.session_id)
}

// .message.Timestamp created_at = 2;
inline bool C_Ping::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool C_Ping::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::message::Timestamp& C_Ping::_internal_created_at() const {
  const ::message::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::Timestamp&>(
      ::message::_Timestamp_default_instance_);
}
inline const ::message::Timestamp& C_Ping::created_at() const {
  // @@protoc_insertion_point(field_get:session.C_Ping.created_at)
  return _internal_created_at();
}
inline void C_Ping::unsafe_arena_set_allocated_created_at(
    ::message::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:session.C_Ping.created_at)
}
inline ::message::Timestamp* C_Ping::release_created_at() {
  
  ::message::Timestamp* temp = created_at_;
  created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::Timestamp* C_Ping::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:session.C_Ping.created_at)
  
  ::message::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline ::message::Timestamp* C_Ping::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::Timestamp>(GetArenaForAllocation());
    created_at_ = p;
  }
  return created_at_;
}
inline ::message::Timestamp* C_Ping::mutable_created_at() {
  ::message::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:session.C_Ping.created_at)
  return _msg;
}
inline void C_Ping::set_allocated_created_at(::message::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:session.C_Ping.created_at)
}

// uint64 server_to_client_interval = 3;
inline void C_Ping::clear_server_to_client_interval() {
  server_to_client_interval_ = uint64_t{0u};
}
inline uint64_t C_Ping::_internal_server_to_client_interval() const {
  return server_to_client_interval_;
}
inline uint64_t C_Ping::server_to_client_interval() const {
  // @@protoc_insertion_point(field_get:session.C_Ping.server_to_client_interval)
  return _internal_server_to_client_interval();
}
inline void C_Ping::_internal_set_server_to_client_interval(uint64_t value) {
  
  server_to_client_interval_ = value;
}
inline void C_Ping::set_server_to_client_interval(uint64_t value) {
  _internal_set_server_to_client_interval(value);
  // @@protoc_insertion_point(field_set:session.C_Ping.server_to_client_interval)
}

// -------------------------------------------------------------------

// S_Ping

// uint64 session_id = 1;
inline void S_Ping::clear_session_id() {
  session_id_ = uint64_t{0u};
}
inline uint64_t S_Ping::_internal_session_id() const {
  return session_id_;
}
inline uint64_t S_Ping::session_id() const {
  // @@protoc_insertion_point(field_get:session.S_Ping.session_id)
  return _internal_session_id();
}
inline void S_Ping::_internal_set_session_id(uint64_t value) {
  
  session_id_ = value;
}
inline void S_Ping::set_session_id(uint64_t value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:session.S_Ping.session_id)
}

// .message.Timestamp created_at = 2;
inline bool S_Ping::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool S_Ping::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::message::Timestamp& S_Ping::_internal_created_at() const {
  const ::message::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::message::Timestamp&>(
      ::message::_Timestamp_default_instance_);
}
inline const ::message::Timestamp& S_Ping::created_at() const {
  // @@protoc_insertion_point(field_get:session.S_Ping.created_at)
  return _internal_created_at();
}
inline void S_Ping::unsafe_arena_set_allocated_created_at(
    ::message::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:session.S_Ping.created_at)
}
inline ::message::Timestamp* S_Ping::release_created_at() {
  
  ::message::Timestamp* temp = created_at_;
  created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::message::Timestamp* S_Ping::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:session.S_Ping.created_at)
  
  ::message::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline ::message::Timestamp* S_Ping::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::message::Timestamp>(GetArenaForAllocation());
    created_at_ = p;
  }
  return created_at_;
}
inline ::message::Timestamp* S_Ping::mutable_created_at() {
  ::message::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:session.S_Ping.created_at)
  return _msg;
}
inline void S_Ping::set_allocated_created_at(::message::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:session.S_Ping.created_at)
}

// uint64 client_to_server_interval = 3;
inline void S_Ping::clear_client_to_server_interval() {
  client_to_server_interval_ = uint64_t{0u};
}
inline uint64_t S_Ping::_internal_client_to_server_interval() const {
  return client_to_server_interval_;
}
inline uint64_t S_Ping::client_to_server_interval() const {
  // @@protoc_insertion_point(field_get:session.S_Ping.client_to_server_interval)
  return _internal_client_to_server_interval();
}
inline void S_Ping::_internal_set_client_to_server_interval(uint64_t value) {
  
  client_to_server_interval_ = value;
}
inline void S_Ping::set_client_to_server_interval(uint64_t value) {
  _internal_set_client_to_server_interval(value);
  // @@protoc_insertion_point(field_set:session.S_Ping.client_to_server_interval)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace session

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Ping_2eproto
